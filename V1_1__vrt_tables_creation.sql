
/* Section 2.1 - VRT Table Creation */

-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=demchdc178x.dc4ca.siemens.de;port=1521;service_name=SDS_PROD

SET client_encoding TO 'UTF8';


SET check_function_bodies = false;

CREATE SCHEMA IF NOT EXISTS vrt;
ALTER SCHEMA vrt OWNER TO scd_testuser;

SET search_path = vrt,oracle,public;


CREATE TABLE anbindung_are (
	vertragsnummer bigint,
	geschaeftsjahr varchar(50),
	are varchar(6),
	cont_gid varchar(8),
	cont_name varchar(50),
	cont_vorname varchar(50),
	cont_l varchar(50),
	cont_abt varchar(50),
	cont_tel varchar(50),
	cont_mail varchar(50),
	responsibility varchar(50)
) ;
ALTER  TABLE anbindung_are OWNER TO scd_testuser;
CREATE UNIQUE INDEX ixanbindung_are ON anbindung_are (vertragsnummer);


CREATE TABLE ap9965_avature (
	gid char(8),
	surname varchar(255),
	name varchar(255),
	email varchar(255),
	are varchar(255),
	country char(2),
	employeetype varchar(255),
	contractstatus varchar(255),
	exitdate varchar(255),
	status varchar(20),
	ts timestamp,
	clientid smallint
) ;
ALTER  TABLE ap9965_avature OWNER TO scd_testuser;
CREATE UNIQUE INDEX ixap9965 ON ap9965_avature (gid);


CREATE TABLE ap9965_basis (
	gid char(8),
	surname varchar(255),
	name varchar(255),
	email varchar(255),
	are varchar(255),
	country char(2),
	employeetype varchar(255),
	contractstatus varchar(255),
	exitdate varchar(255),
	status varchar(20),
	ts timestamp
) ;
ALTER  TABLE ap9965_basis OWNER TO scd_testuser;


CREATE TABLE ap9965_basis_sicherung (
	gid char(8),
	surname varchar(255),
	name varchar(255),
	email varchar(255),
	are varchar(255),
	country char(2),
	employeetype varchar(255),
	contractstatus varchar(255),
	exitdate varchar(255),
	status varchar(20),
	ts timestamp
) ;
ALTER  TABLE ap9965_basis_sicherung OWNER TO scd_testuser;


CREATE TABLE app (
	app_id bigint NOT NULL,
	description varchar(1000),
	name varchar(100) NOT NULL
) ;
ALTER  TABLE app OWNER TO scd_testuser;
ALTER TABLE app ADD PRIMARY KEY (app_id);
ALTER TABLE app ALTER COLUMN APP_ID SET NOT NULL;
ALTER TABLE app ALTER COLUMN NAME SET NOT NULL;


CREATE TABLE app_config (
	config_id bigint NOT NULL,
	description varchar(1000),
	key varchar(100) NOT NULL,
	value varchar(4000),
	app_id bigint,
	app_name varchar(100)
) ;
ALTER  TABLE app_config OWNER TO scd_testuser;
ALTER TABLE app_config ADD PRIMARY KEY (config_id);
ALTER TABLE app_config ALTER COLUMN CONFIG_ID SET NOT NULL;
ALTER TABLE app_config ALTER COLUMN KEY SET NOT NULL;


CREATE TABLE ap_delivery (
	delivery_id bigint NOT NULL,
	contract_id bigint NOT NULL,
	name varchar(60) NOT NULL,
	description varchar(1000),
	enabled smallint NOT NULL,
	query varchar(4000),
	user_id bigint NOT NULL,
	added_ts timestamp NOT NULL DEFAULT statement_timestamp(),
	latest_run_result varchar(10) DEFAULT NULL,
	latest_run_ts timestamp,
	to_remove_ts timestamp,
	supp_data_file varchar(255),
	supp_data_filetype varchar(20),
	supp_data_delimiter char(1),
	supp_data_file_mod_ts timestamp,
	supp_data_has_header smallint NOT NULL DEFAULT 0,
	supp_data_enabled smallint NOT NULL DEFAULT 0,
	backup smallint NOT NULL DEFAULT 0,
	backup_count bigint,
	is_running smallint NOT NULL DEFAULT 0
) ;
ALTER  TABLE ap_delivery OWNER TO scd_testuser;
ALTER TABLE ap_delivery ADD PRIMARY KEY (delivery_id);
ALTER TABLE ap_delivery ALTER COLUMN DELIVERY_ID SET NOT NULL;
ALTER TABLE ap_delivery ALTER COLUMN CONTRACT_ID SET NOT NULL;
ALTER TABLE ap_delivery ALTER COLUMN NAME SET NOT NULL;
ALTER TABLE ap_delivery ALTER COLUMN ENABLED SET NOT NULL;
ALTER TABLE ap_delivery ALTER COLUMN USER_ID SET NOT NULL;
ALTER TABLE ap_delivery ALTER COLUMN ADDED_TS SET NOT NULL;
ALTER TABLE ap_delivery ALTER COLUMN SUPP_DATA_HAS_HEADER SET NOT NULL;
ALTER TABLE ap_delivery ALTER COLUMN SUPP_DATA_ENABLED SET NOT NULL;
ALTER TABLE ap_delivery ALTER COLUMN BACKUP SET NOT NULL;
ALTER TABLE ap_delivery ALTER COLUMN IS_RUNNING SET NOT NULL;


CREATE TABLE ap_delivery_save (
	delivery_id bigint NOT NULL,
	contract_id bigint NOT NULL,
	name varchar(60) NOT NULL,
	description varchar(1000),
	enabled smallint NOT NULL,
	query varchar(4000),
	user_id bigint NOT NULL,
	added_ts timestamp NOT NULL,
	latest_run_result varchar(10),
	latest_run_ts timestamp,
	to_remove_ts timestamp,
	supp_data_file varchar(255),
	supp_data_filetype varchar(20),
	supp_data_delimiter char(1),
	supp_data_file_mod_ts timestamp,
	supp_data_has_header smallint NOT NULL,
	supp_data_enabled smallint NOT NULL,
	backup smallint NOT NULL,
	backup_count bigint
) ;
ALTER  TABLE ap_delivery_save OWNER TO scd_testuser;
ALTER TABLE ap_delivery_save ALTER COLUMN DELIVERY_ID SET NOT NULL;
ALTER TABLE ap_delivery_save ALTER COLUMN CONTRACT_ID SET NOT NULL;
ALTER TABLE ap_delivery_save ALTER COLUMN NAME SET NOT NULL;
ALTER TABLE ap_delivery_save ALTER COLUMN ENABLED SET NOT NULL;
ALTER TABLE ap_delivery_save ALTER COLUMN USER_ID SET NOT NULL;
ALTER TABLE ap_delivery_save ALTER COLUMN ADDED_TS SET NOT NULL;
ALTER TABLE ap_delivery_save ALTER COLUMN SUPP_DATA_HAS_HEADER SET NOT NULL;
ALTER TABLE ap_delivery_save ALTER COLUMN SUPP_DATA_ENABLED SET NOT NULL;
ALTER TABLE ap_delivery_save ALTER COLUMN BACKUP SET NOT NULL;


CREATE TABLE ap_exporter (
	exporter_id bigint NOT NULL,
	scheduler_id bigint NOT NULL,
	file_name varchar(250) NOT NULL,
	file_format varchar(20) NOT NULL,
	output_to varchar(20) NOT NULL,
	delimiter char(1),
	charset varchar(25) NOT NULL DEFAULT 'UTF-8',
	zip_data smallint NOT NULL DEFAULT 0,
	print_header smallint NOT NULL DEFAULT 1,
	openft_addr varchar(128),
	openft_transfer_adm varchar(75),
	enabled smallint NOT NULL,
	user_id bigint NOT NULL,
	added_ts timestamp NOT NULL DEFAULT statement_timestamp(),
	download_for varchar(180),
	transfer_files smallint NOT NULL DEFAULT NULL,
	delta_enabled smallint NOT NULL DEFAULT 0,
	delta_indexes varchar(1000),
	delta_indexes_all smallint NOT NULL DEFAULT 0,
	print_status_column smallint NOT NULL DEFAULT 0,
	transfer_data smallint NOT NULL DEFAULT 0,
	transfer_delta smallint NOT NULL DEFAULT 0,
	zip_delta smallint NOT NULL DEFAULT 0,
	zip_file_name varchar(250),
	double_quotes_enclosing smallint NOT NULL DEFAULT 0,
	line_break varchar(20) DEFAULT 'WIN',
	sign_transfer_files smallint NOT NULL DEFAULT 0,
	sftp_user varchar(50),
	sftp_host varchar(100),
	sftp_port bigint,
	sftp_folder varchar(255)
) ;
ALTER  TABLE ap_exporter OWNER TO scd_testuser;
ALTER TABLE ap_exporter ADD PRIMARY KEY (exporter_id);
ALTER TABLE ap_exporter ADD CONSTRAINT ap_exporter_uc_file_name CHECK (file_format = UPPER(file_format));
ALTER TABLE ap_exporter ADD CONSTRAINT ap_exporter_uc_output_to CHECK (output_to = UPPER(output_to));
ALTER TABLE ap_exporter ALTER COLUMN EXPORTER_ID SET NOT NULL;
ALTER TABLE ap_exporter ALTER COLUMN SCHEDULER_ID SET NOT NULL;
ALTER TABLE ap_exporter ALTER COLUMN FILE_NAME SET NOT NULL;
ALTER TABLE ap_exporter ALTER COLUMN FILE_FORMAT SET NOT NULL;
ALTER TABLE ap_exporter ALTER COLUMN OUTPUT_TO SET NOT NULL;
ALTER TABLE ap_exporter ALTER COLUMN CHARSET SET NOT NULL;
ALTER TABLE ap_exporter ALTER COLUMN ZIP_DATA SET NOT NULL;
ALTER TABLE ap_exporter ALTER COLUMN PRINT_HEADER SET NOT NULL;
ALTER TABLE ap_exporter ALTER COLUMN ENABLED SET NOT NULL;
ALTER TABLE ap_exporter ALTER COLUMN USER_ID SET NOT NULL;
ALTER TABLE ap_exporter ALTER COLUMN ADDED_TS SET NOT NULL;
ALTER TABLE ap_exporter ALTER COLUMN TRANSFER_FILES SET NOT NULL;
ALTER TABLE ap_exporter ALTER COLUMN DELTA_ENABLED SET NOT NULL;
ALTER TABLE ap_exporter ALTER COLUMN DELTA_INDEXES_ALL SET NOT NULL;
ALTER TABLE ap_exporter ALTER COLUMN PRINT_STATUS_COLUMN SET NOT NULL;
ALTER TABLE ap_exporter ALTER COLUMN TRANSFER_DATA SET NOT NULL;
ALTER TABLE ap_exporter ALTER COLUMN TRANSFER_DELTA SET NOT NULL;
ALTER TABLE ap_exporter ALTER COLUMN ZIP_DELTA SET NOT NULL;
ALTER TABLE ap_exporter ALTER COLUMN DOUBLE_QUOTES_ENCLOSING SET NOT NULL;
ALTER TABLE ap_exporter ALTER COLUMN SIGN_TRANSFER_FILES SET NOT NULL;


CREATE TABLE ap_exporter_log (
	exporter_log_id bigint NOT NULL,
	delivery_id bigint NOT NULL,
	exporter_id bigint,
	start_ts timestamp NOT NULL,
	end_ts timestamp,
	initiated_by varchar(20) NOT NULL,
	file_path varchar(255),
	zip_file_path varchar(255),
	result varchar(10) NOT NULL,
	error_description varchar(4000),
	error_stage varchar(40),
	record_count bigint,
	transferred smallint NOT NULL DEFAULT 0,
	data_file_name varchar(255),
	delta_file_path varchar(255),
	delta_file_name varchar(255),
	delta_record_count bigint DEFAULT 0
) ;
ALTER  TABLE ap_exporter_log OWNER TO scd_testuser;
ALTER TABLE ap_exporter_log ADD PRIMARY KEY (exporter_log_id);
ALTER TABLE ap_exporter_log ADD CONSTRAINT ap_exporter_log_uc_init_by CHECK (initiated_by = UPPER(initiated_by));
ALTER TABLE ap_exporter_log ADD CONSTRAINT ap_exporter_log_uc_result CHECK (result = UPPER(result));
ALTER TABLE ap_exporter_log ALTER COLUMN EXPORTER_LOG_ID SET NOT NULL;
ALTER TABLE ap_exporter_log ALTER COLUMN DELIVERY_ID SET NOT NULL;
ALTER TABLE ap_exporter_log ALTER COLUMN START_TS SET NOT NULL;
ALTER TABLE ap_exporter_log ALTER COLUMN INITIATED_BY SET NOT NULL;
ALTER TABLE ap_exporter_log ALTER COLUMN RESULT SET NOT NULL;
ALTER TABLE ap_exporter_log ALTER COLUMN TRANSFERRED SET NOT NULL;


CREATE TABLE ap_exporter_log_save (
	exporter_log_id bigint NOT NULL,
	delivery_id bigint NOT NULL,
	exporter_id bigint,
	start_ts timestamp NOT NULL,
	end_ts timestamp,
	initiated_by varchar(20) NOT NULL,
	file_path varchar(255),
	zip_file_path varchar(255),
	result varchar(10) NOT NULL,
	error_description varchar(4000),
	error_stage varchar(20),
	record_count bigint,
	transferred smallint NOT NULL,
	file_name varchar(255)
) ;
ALTER  TABLE ap_exporter_log_save OWNER TO scd_testuser;
ALTER TABLE ap_exporter_log_save ALTER COLUMN EXPORTER_LOG_ID SET NOT NULL;
ALTER TABLE ap_exporter_log_save ALTER COLUMN DELIVERY_ID SET NOT NULL;
ALTER TABLE ap_exporter_log_save ALTER COLUMN START_TS SET NOT NULL;
ALTER TABLE ap_exporter_log_save ALTER COLUMN INITIATED_BY SET NOT NULL;
ALTER TABLE ap_exporter_log_save ALTER COLUMN RESULT SET NOT NULL;
ALTER TABLE ap_exporter_log_save ALTER COLUMN TRANSFERRED SET NOT NULL;


CREATE TABLE ap_exporter_save (
	exporter_id bigint NOT NULL,
	scheduler_id bigint NOT NULL,
	file_name varchar(250) NOT NULL,
	file_format varchar(20) NOT NULL,
	output_to varchar(20) NOT NULL,
	delimiter char(1),
	charset varchar(25) NOT NULL,
	zip smallint NOT NULL,
	print_header smallint NOT NULL,
	openft_addr varchar(128),
	openft_transfer_adm varchar(75),
	enabled smallint NOT NULL,
	user_id bigint NOT NULL,
	added_ts timestamp NOT NULL,
	download_for varchar(180),
	transfer_files smallint NOT NULL,
	zip_file_name varchar(250)
) ;
ALTER  TABLE ap_exporter_save OWNER TO scd_testuser;
ALTER TABLE ap_exporter_save ALTER COLUMN EXPORTER_ID SET NOT NULL;
ALTER TABLE ap_exporter_save ALTER COLUMN SCHEDULER_ID SET NOT NULL;
ALTER TABLE ap_exporter_save ALTER COLUMN FILE_NAME SET NOT NULL;
ALTER TABLE ap_exporter_save ALTER COLUMN FILE_FORMAT SET NOT NULL;
ALTER TABLE ap_exporter_save ALTER COLUMN OUTPUT_TO SET NOT NULL;
ALTER TABLE ap_exporter_save ALTER COLUMN CHARSET SET NOT NULL;
ALTER TABLE ap_exporter_save ALTER COLUMN ZIP SET NOT NULL;
ALTER TABLE ap_exporter_save ALTER COLUMN PRINT_HEADER SET NOT NULL;
ALTER TABLE ap_exporter_save ALTER COLUMN ENABLED SET NOT NULL;
ALTER TABLE ap_exporter_save ALTER COLUMN USER_ID SET NOT NULL;
ALTER TABLE ap_exporter_save ALTER COLUMN ADDED_TS SET NOT NULL;
ALTER TABLE ap_exporter_save ALTER COLUMN TRANSFER_FILES SET NOT NULL;


CREATE TABLE ap_scheduler (
	scheduler_id bigint NOT NULL,
	delivery_id bigint NOT NULL,
	cron varchar(50) NOT NULL,
	enabled smallint NOT NULL,
	user_id bigint NOT NULL,
	added_ts timestamp NOT NULL DEFAULT statement_timestamp()
) ;
ALTER  TABLE ap_scheduler OWNER TO scd_testuser;
ALTER TABLE ap_scheduler ADD PRIMARY KEY (scheduler_id);
ALTER TABLE ap_scheduler ALTER COLUMN SCHEDULER_ID SET NOT NULL;
ALTER TABLE ap_scheduler ALTER COLUMN DELIVERY_ID SET NOT NULL;
ALTER TABLE ap_scheduler ALTER COLUMN CRON SET NOT NULL;
ALTER TABLE ap_scheduler ALTER COLUMN ENABLED SET NOT NULL;
ALTER TABLE ap_scheduler ALTER COLUMN USER_ID SET NOT NULL;
ALTER TABLE ap_scheduler ALTER COLUMN ADDED_TS SET NOT NULL;


CREATE TABLE ap_scheduler_save (
	scheduler_id bigint NOT NULL,
	delivery_id bigint NOT NULL,
	cron varchar(50) NOT NULL,
	enabled smallint NOT NULL,
	user_id bigint NOT NULL,
	added_ts timestamp NOT NULL
) ;
ALTER  TABLE ap_scheduler_save OWNER TO scd_testuser;
ALTER TABLE ap_scheduler_save ALTER COLUMN SCHEDULER_ID SET NOT NULL;
ALTER TABLE ap_scheduler_save ALTER COLUMN DELIVERY_ID SET NOT NULL;
ALTER TABLE ap_scheduler_save ALTER COLUMN CRON SET NOT NULL;
ALTER TABLE ap_scheduler_save ALTER COLUMN ENABLED SET NOT NULL;
ALTER TABLE ap_scheduler_save ALTER COLUMN USER_ID SET NOT NULL;
ALTER TABLE ap_scheduler_save ALTER COLUMN ADDED_TS SET NOT NULL;


CREATE TABLE ap_supp_data (
	delivery_id bigint NOT NULL,
	col1 varchar(4000),
	col2 varchar(4000),
	col3 varchar(4000),
	col4 varchar(4000),
	col5 varchar(4000),
	col6 varchar(4000),
	col7 varchar(4000),
	col8 varchar(4000),
	col9 varchar(4000),
	col10 varchar(4000),
	col11 varchar(4000),
	col12 varchar(4000),
	col13 varchar(4000),
	col14 varchar(4000),
	col15 varchar(4000),
	col16 varchar(4000),
	col17 varchar(4000),
	col18 varchar(4000),
	col19 varchar(4000),
	col20 varchar(4000),
	col21 varchar(4000),
	col22 varchar(4000),
	col23 varchar(4000),
	col24 varchar(4000),
	col25 varchar(4000),
	col26 varchar(4000),
	col27 varchar(4000),
	col28 varchar(4000),
	col29 varchar(4000),
	col30 varchar(4000),
	col31 varchar(4000),
	col32 varchar(4000),
	col33 varchar(4000),
	col34 varchar(4000),
	col35 varchar(4000),
	col36 varchar(4000),
	col37 varchar(4000),
	col38 varchar(4000),
	col39 varchar(4000),
	col40 varchar(4000),
	col41 varchar(4000),
	col42 varchar(4000),
	col43 varchar(4000),
	col44 varchar(4000),
	col45 varchar(4000),
	col46 varchar(4000),
	col47 varchar(4000),
	col48 varchar(4000),
	col49 varchar(4000),
	col50 varchar(4000),
	col51 varchar(4000),
	col52 varchar(4000),
	col53 varchar(4000),
	col54 varchar(4000),
	col55 varchar(4000),
	col56 varchar(4000),
	col57 varchar(4000),
	col58 varchar(4000),
	col59 varchar(4000),
	col60 varchar(4000),
	col61 varchar(4000),
	col62 varchar(4000),
	col63 varchar(4000),
	col64 varchar(4000),
	col65 varchar(4000),
	col66 varchar(4000),
	col67 varchar(4000),
	col68 varchar(4000),
	col69 varchar(4000),
	col70 varchar(4000),
	col71 varchar(4000),
	col72 varchar(4000),
	col73 varchar(4000),
	col74 varchar(4000),
	col75 varchar(4000),
	col76 varchar(4000),
	col77 varchar(4000),
	col78 varchar(4000),
	col79 varchar(4000),
	col80 varchar(4000),
	col81 varchar(4000),
	col82 varchar(4000),
	col83 varchar(4000),
	col84 varchar(4000),
	col85 varchar(4000),
	col86 varchar(4000),
	col87 varchar(4000),
	col88 varchar(4000),
	col89 varchar(4000),
	col90 varchar(4000),
	col91 varchar(4000),
	col92 varchar(4000),
	col93 varchar(4000),
	col94 varchar(4000),
	col95 varchar(4000),
	col96 varchar(4000),
	col97 varchar(4000),
	col98 varchar(4000),
	col99 varchar(4000),
	col100 varchar(4000),
	supp_data_id bigint NOT NULL
) ;
ALTER  TABLE ap_supp_data OWNER TO scd_testuser;
ALTER TABLE ap_supp_data ADD PRIMARY KEY (supp_data_id);
ALTER TABLE ap_supp_data ALTER COLUMN DELIVERY_ID SET NOT NULL;


CREATE TABLE ap_supp_data_save (
	delivery_id bigint NOT NULL,
	col1 varchar(4000),
	col2 varchar(4000),
	col3 varchar(4000),
	col4 varchar(4000),
	col5 varchar(4000),
	col6 varchar(4000),
	col7 varchar(4000),
	col8 varchar(4000),
	col9 varchar(4000),
	col10 varchar(4000),
	col11 varchar(4000),
	col12 varchar(4000),
	col13 varchar(4000),
	col14 varchar(4000),
	col15 varchar(4000),
	col16 varchar(4000),
	col17 varchar(4000),
	col18 varchar(4000),
	col19 varchar(4000),
	col20 varchar(4000),
	col21 varchar(4000),
	col22 varchar(4000),
	col23 varchar(4000),
	col24 varchar(4000),
	col25 varchar(4000),
	col26 varchar(4000),
	col27 varchar(4000),
	col28 varchar(4000),
	col29 varchar(4000),
	col30 varchar(4000),
	col31 varchar(4000),
	col32 varchar(4000),
	col33 varchar(4000),
	col34 varchar(4000),
	col35 varchar(4000),
	col36 varchar(4000),
	col37 varchar(4000),
	col38 varchar(4000),
	col39 varchar(4000),
	col40 varchar(4000),
	col41 varchar(4000),
	col42 varchar(4000),
	col43 varchar(4000),
	col44 varchar(4000),
	col45 varchar(4000),
	col46 varchar(4000),
	col47 varchar(4000),
	col48 varchar(4000),
	col49 varchar(4000),
	col50 varchar(4000),
	col51 varchar(4000),
	col52 varchar(4000),
	col53 varchar(4000),
	col54 varchar(4000),
	col55 varchar(4000),
	col56 varchar(4000),
	col57 varchar(4000),
	col58 varchar(4000),
	col59 varchar(4000),
	col60 varchar(4000),
	col61 varchar(4000),
	col62 varchar(4000),
	col63 varchar(4000),
	col64 varchar(4000),
	col65 varchar(4000),
	col66 varchar(4000),
	col67 varchar(4000),
	col68 varchar(4000),
	col69 varchar(4000),
	col70 varchar(4000),
	col71 varchar(4000),
	col72 varchar(4000),
	col73 varchar(4000),
	col74 varchar(4000),
	col75 varchar(4000),
	col76 varchar(4000),
	col77 varchar(4000),
	col78 varchar(4000),
	col79 varchar(4000),
	col80 varchar(4000),
	col81 varchar(4000),
	col82 varchar(4000),
	col83 varchar(4000),
	col84 varchar(4000),
	col85 varchar(4000),
	col86 varchar(4000),
	col87 varchar(4000),
	col88 varchar(4000),
	col89 varchar(4000),
	col90 varchar(4000),
	col91 varchar(4000),
	col92 varchar(4000),
	col93 varchar(4000),
	col94 varchar(4000),
	col95 varchar(4000),
	col96 varchar(4000),
	col97 varchar(4000),
	col98 varchar(4000),
	col99 varchar(4000),
	col100 varchar(4000),
	supp_data_id bigint
) ;
ALTER  TABLE ap_supp_data_save OWNER TO scd_testuser;
ALTER TABLE ap_supp_data_save ALTER COLUMN DELIVERY_ID SET NOT NULL;


CREATE TABLE ap_supp_metadata (
	delivery_id bigint NOT NULL,
	col_number bigint,
	title varchar(50),
	transform_fn varchar(100),
	supp_metadata_id bigint NOT NULL,
	transform_fn_arg1 varchar(100),
	transform_fn_arg2 varchar(100),
	transform_fn_arg3 varchar(100)
) ;
ALTER  TABLE ap_supp_metadata OWNER TO scd_testuser;
ALTER TABLE ap_supp_metadata ALTER COLUMN DELIVERY_ID SET NOT NULL;
ALTER TABLE ap_supp_metadata ALTER COLUMN SUPP_METADATA_ID SET NOT NULL;


CREATE TABLE ap_supp_metadata_save (
	delivery_id bigint NOT NULL,
	col_number bigint,
	title varchar(50),
	transform_fn varchar(100),
	supp_metadata_id bigint NOT NULL,
	transform_fn_arg1 varchar(100),
	transform_fn_arg2 varchar(100),
	transform_fn_arg3 varchar(100)
) ;
ALTER  TABLE ap_supp_metadata_save OWNER TO scd_testuser;
ALTER TABLE ap_supp_metadata_save ALTER COLUMN DELIVERY_ID SET NOT NULL;
ALTER TABLE ap_supp_metadata_save ALTER COLUMN SUPP_METADATA_ID SET NOT NULL;


CREATE TABLE ap_user (
	user_id bigint NOT NULL,
	gid varchar(8) NOT NULL,
	first_name varchar(50) NOT NULL,
	last_name varchar(50) NOT NULL,
	email varchar(75) NOT NULL,
	enabled smallint NOT NULL,
	role varchar(20) NOT NULL,
	added_ts timestamp NOT NULL DEFAULT statement_timestamp()
) ;
ALTER  TABLE ap_user OWNER TO scd_testuser;
ALTER TABLE ap_user ADD PRIMARY KEY (user_id);
ALTER TABLE ap_user ALTER COLUMN USER_ID SET NOT NULL;
ALTER TABLE ap_user ALTER COLUMN GID SET NOT NULL;
ALTER TABLE ap_user ALTER COLUMN FIRST_NAME SET NOT NULL;
ALTER TABLE ap_user ALTER COLUMN LAST_NAME SET NOT NULL;
ALTER TABLE ap_user ALTER COLUMN EMAIL SET NOT NULL;
ALTER TABLE ap_user ALTER COLUMN ENABLED SET NOT NULL;
ALTER TABLE ap_user ALTER COLUMN ROLE SET NOT NULL;
ALTER TABLE ap_user ALTER COLUMN ADDED_TS SET NOT NULL;


CREATE TABLE ap_user_save (
	user_id bigint NOT NULL,
	gid varchar(8) NOT NULL,
	first_name varchar(50) NOT NULL,
	last_name varchar(50) NOT NULL,
	email varchar(75) NOT NULL,
	enabled smallint NOT NULL,
	role varchar(20) NOT NULL,
	added_ts timestamp NOT NULL
) ;
ALTER  TABLE ap_user_save OWNER TO scd_testuser;
ALTER TABLE ap_user_save ALTER COLUMN USER_ID SET NOT NULL;
ALTER TABLE ap_user_save ALTER COLUMN GID SET NOT NULL;
ALTER TABLE ap_user_save ALTER COLUMN FIRST_NAME SET NOT NULL;
ALTER TABLE ap_user_save ALTER COLUMN LAST_NAME SET NOT NULL;
ALTER TABLE ap_user_save ALTER COLUMN EMAIL SET NOT NULL;
ALTER TABLE ap_user_save ALTER COLUMN ENABLED SET NOT NULL;
ALTER TABLE ap_user_save ALTER COLUMN ROLE SET NOT NULL;
ALTER TABLE ap_user_save ALTER COLUMN ADDED_TS SET NOT NULL;


CREATE TABLE as_billing (
	id bigint NOT NULL,
	given_name varchar(50),
	surname varchar(50),
	company varchar(50),
	department varchar(50),
	org_id varchar(20),
	order_id varchar(50),
	position_nr bigint,
	n bigint,
	la varchar(10),
	destination varchar(50),
	sum bigint,
	service varchar(50),
	service_year smallint,
	service_month smallint,
	a_are varchar(10),
	contract_id varchar(50),
	subject varchar(100),
	client_id smallint,
	correction smallint NOT NULL DEFAULT 0,
	exported timestamp
) ;
ALTER  TABLE as_billing OWNER TO scd_testuser;
ALTER TABLE as_billing ADD PRIMARY KEY (id);
ALTER TABLE as_billing ALTER COLUMN ID SET NOT NULL;
ALTER TABLE as_billing ALTER COLUMN CORRECTION SET NOT NULL;


CREATE TABLE as_pricelist (
	service varchar(20),
	amount_from bigint,
	amount_to bigint,
	price bigint,
	info varchar(20)
) ;
ALTER  TABLE as_pricelist OWNER TO scd_testuser;


CREATE TABLE as_pricing (
	service varchar(50) NOT NULL,
	amount bigint NOT NULL,
	price bigint
) ;
ALTER  TABLE as_pricing OWNER TO scd_testuser;
ALTER TABLE as_pricing ADD PRIMARY KEY (service,amount);


CREATE TABLE bearbeiter (
	kurzzeichen varchar(50),
	gid varchar(8),
	name varchar(50),
	vorname varchar(50),
	abteilung varchar(50),
	mail varchar(50),
	nt_kennung varchar(50)
) ;
ALTER  TABLE bearbeiter OWNER TO scd_testuser;


CREATE TABLE check_functions (
	delivery_id numeric(38) NOT NULL,
	sqlstatement varchar(2000),
	threshold numeric(38),
	deliverycheckfailstatus smallint,
	info varchar(256),
	id bigint NOT NULL
) ;
ALTER  TABLE check_functions OWNER TO scd_testuser;
ALTER TABLE check_functions ADD PRIMARY KEY (id);
ALTER TABLE check_functions ALTER COLUMN DELIVERY_ID SET NOT NULL;


CREATE TABLE check_mon_exp_prot (
	exectime timestamp,
	parameter numeric(38),
	scdx_createtime timestamp
) ;
ALTER  TABLE check_mon_exp_prot OWNER TO scd_testuser;


CREATE TABLE delivery_status_change (
	delivery_id numeric(38) NOT NULL,
	deliverystatusifscdtableold smallint NOT NULL,
	info varchar(256)
) ;
ALTER  TABLE delivery_status_change OWNER TO scd_testuser;
ALTER TABLE delivery_status_change ADD UNIQUE (delivery_id);
ALTER TABLE delivery_status_change ALTER COLUMN DELIVERY_ID SET NOT NULL;
ALTER TABLE delivery_status_change ALTER COLUMN DELIVERYSTATUSIFSCDTABLEOLD SET NOT NULL;


CREATE TABLE el_audit (
	account varchar(128),
	gid_typ varchar(26),
	vertragsanzahl numeric(38),
	trefferuebrig numeric(38),
	quota varchar(26),
	treffermenge numeric(38),
	zugriffe numeric(38),
	vertragspreis numeric(38),
	vertragsmailkunde varchar(128),
	month_year varchar(20)
) ;
ALTER  TABLE el_audit OWNER TO scd_testuser;


CREATE TABLE ergebnis (
	verteiler_nummer integer,
	laufende_nummer integer,
	verteiler_art char(1),
	mailadresse varchar(120),
	name varchar(32),
	vorname varchar(32),
	abteilung varchar(32),
	telefon varchar(16),
	raum varchar(16),
	bereich varchar(32),
	standort varchar(32),
	firma varchar(32),
	land char(2),
	inhalt_nummer smallint,
	ignore smallint,
	gid char(8)
) ;
ALTER  TABLE ergebnis OWNER TO scd_testuser;
CREATE UNIQUE INDEX ixergebnis ON ergebnis (verteiler_nummer, laufende_nummer);


CREATE TABLE e_asp (
	vertragsart char(2),
	vertragsnummer bigint,
	mandant varchar(250)
) ;
ALTER  TABLE e_asp OWNER TO scd_testuser;
CREATE UNIQUE INDEX ixe_asp ON e_asp (vertragsnummer);


CREATE TABLE e_contract_server (
	ecs_id bigint,
	ecs_contract_id bigint,
	ecs_system_identifier varchar(3),
	ecs_server_id varchar(250)
) ;
ALTER  TABLE e_contract_server OWNER TO scd_testuser;
CREATE UNIQUE INDEX ixe_contract_server ON e_contract_server (ecs_id, ecs_contract_id);


CREATE TABLE e_ga_resource (
	ers_id bigint,
	ers_resource_id varchar(250),
	ers_system_identifier varchar(3),
	ers_ts_create varchar(100),
	ers_ts_modify varchar(100)
) ;
ALTER  TABLE e_ga_resource OWNER TO scd_testuser;
CREATE UNIQUE INDEX ixe_ga_resource ON e_ga_resource (ers_id, ers_resource_id);


CREATE TABLE e_ga_server (
	esr_id bigint,
	esr_server_id varchar(250),
	esr_system_identifier varchar(3),
	esr_ts_create varchar(100),
	esr_ts_modify varchar(100)
) ;
ALTER  TABLE e_ga_server OWNER TO scd_testuser;
CREATE UNIQUE INDEX ixe_ga_server ON e_ga_server (esr_id);


CREATE TABLE e_start_url (
	esu_id bigint,
	vertragsnummer bigint,
	esu_url varchar(250)
) ;
ALTER  TABLE e_start_url OWNER TO scd_testuser;
CREATE UNIQUE INDEX ixe_start_url ON e_start_url (esu_id, vertragsnummer);


CREATE TABLE e_unprotected_url (
	euu_id bigint,
	vertragsnummer bigint,
	euu_url varchar(250)
) ;
ALTER  TABLE e_unprotected_url OWNER TO scd_testuser;
CREATE UNIQUE INDEX ixe_unprotected_url ON e_unprotected_url (euu_id, vertragsnummer);


CREATE TABLE e_vertraege_zusatz (
	vertragsnummer bigint,
	evz_entitlement_status varchar(50),
	evz_system_linie varchar(50),
	evz_application_port varchar(50),
	evz_lm_username smallint,
	evz_lm_windows smallint,
	evz_lm_pki smallint,
	evz_lm_grid smallint,
	evz_lm_sms smallint,
	evz_lm_token smallint,
	evz_default_login_page smallint,
	evz_login_page varchar(250),
	evz_internet smallint,
	evz_intranet smallint,
	evz_pm_authentication_only smallint,
	evz_int_entitlement_only smallint,
	evz_operating_system varchar(50),
	evz_sslloadbalancer smallint,
	evz_user_type_internal smallint,
	evz_user_type_external smallint,
	evz_webserver varchar(50)
) ;
ALTER  TABLE e_vertraege_zusatz OWNER TO scd_testuser;
CREATE UNIQUE INDEX ixe_vertraege_zusatz ON e_vertraege_zusatz (vertragsnummer);


CREATE TABLE filter (
	verteiler_nummer integer,
	inhalt_nummer smallint,
	laufende_nummer integer,
	gid char(8)
) ;
ALTER  TABLE filter OWNER TO scd_testuser;
CREATE UNIQUE INDEX ixfilter ON filter (verteiler_nummer, inhalt_nummer, laufende_nummer);


CREATE TABLE gb_dss2 (
	ecgid varchar(26),
	ecstatus varchar(26),
	ecsystem varchar(26)
) ;
ALTER  TABLE gb_dss2 OWNER TO scd_testuser;


CREATE TABLE gb_ru_adobe (
	emailaddress varchar(128)
) ;
ALTER  TABLE gb_ru_adobe OWNER TO scd_testuser;


CREATE TABLE gb_yunex_cert (
	gid varchar(26)
) ;
ALTER  TABLE gb_yunex_cert OWNER TO scd_testuser;


CREATE TABLE gb_yunex_de (
	gid varchar(26)
) ;
ALTER  TABLE gb_yunex_de OWNER TO scd_testuser;


CREATE TABLE gc_case (
	case_id bigint NOT NULL,
	added_at timestamp,
	cleared bigint NOT NULL,
	cleared_at timestamp,
	escalation_counter bigint NOT NULL,
	escalation_level varchar(50) NOT NULL,
	gid varchar(8) NOT NULL,
	last_escalation_at timestamp,
	last_owner varchar(255),
	last_owner_counter bigint,
	manually_cleared bigint,
	obs varchar(4000),
	to_check bigint NOT NULL,
	week_count bigint NOT NULL,
	run_data_id bigint
) ;
ALTER  TABLE gc_case OWNER TO scd_testuser;
CREATE INDEX ix_gc_case_gid ON gc_case (gid);
ALTER TABLE gc_case ADD PRIMARY KEY (case_id);
ALTER TABLE gc_case ALTER COLUMN CASE_ID SET NOT NULL;
ALTER TABLE gc_case ALTER COLUMN CLEARED SET NOT NULL;
ALTER TABLE gc_case ALTER COLUMN ESCALATION_COUNTER SET NOT NULL;
ALTER TABLE gc_case ALTER COLUMN ESCALATION_LEVEL SET NOT NULL;
ALTER TABLE gc_case ALTER COLUMN GID SET NOT NULL;
ALTER TABLE gc_case ALTER COLUMN TO_CHECK SET NOT NULL;
ALTER TABLE gc_case ALTER COLUMN WEEK_COUNT SET NOT NULL;


CREATE TABLE gc_country (
	country_id bigint NOT NULL,
	abbreviation varchar(50),
	added_at timestamp,
	are varchar(255),
	gid varchar(8),
	gn varchar(255),
	mail varchar(100),
	name varchar(100) NOT NULL,
	sn varchar(255),
	lead_country_id bigint,
	user_id bigint
) ;
ALTER  TABLE gc_country OWNER TO scd_testuser;
ALTER TABLE gc_country ADD PRIMARY KEY (country_id);
ALTER TABLE gc_country ALTER COLUMN COUNTRY_ID SET NOT NULL;
ALTER TABLE gc_country ALTER COLUMN NAME SET NOT NULL;


CREATE TABLE gc_email_template (
	template_id bigint NOT NULL,
	body text,
	name varchar(100) NOT NULL,
	sender varchar(255),
	subject varchar(255),
	use_for_error_notifications bigint,
	use_for_escalation bigint,
	use_for_query_notifications bigint,
	use_for_success_notifications bigint,
	user_id bigint NOT NULL
) ;
ALTER  TABLE gc_email_template OWNER TO scd_testuser;
ALTER TABLE gc_email_template ADD PRIMARY KEY (template_id);
ALTER TABLE gc_email_template ALTER COLUMN TEMPLATE_ID SET NOT NULL;
ALTER TABLE gc_email_template ALTER COLUMN NAME SET NOT NULL;
ALTER TABLE gc_email_template ALTER COLUMN USER_ID SET NOT NULL;


CREATE TABLE gc_escalation (
	escalation_id bigint NOT NULL,
	added_at timestamp,
	email_bcc varchar(512),
	email_body text,
	email_cc varchar(512),
	email_from varchar(255),
	email_subject varchar(255),
	email_to varchar(512),
	escalation_level varchar(50) NOT NULL,
	obs varchar(2000),
	email_template_id bigint,
	user_id bigint NOT NULL
) ;
ALTER  TABLE gc_escalation OWNER TO scd_testuser;
ALTER TABLE gc_escalation ADD PRIMARY KEY (escalation_id);
ALTER TABLE gc_escalation ALTER COLUMN ESCALATION_ID SET NOT NULL;
ALTER TABLE gc_escalation ALTER COLUMN ESCALATION_LEVEL SET NOT NULL;
ALTER TABLE gc_escalation ALTER COLUMN USER_ID SET NOT NULL;


CREATE TABLE gc_escalation_cases (
	escalation_id bigint NOT NULL,
	case_id bigint NOT NULL
) ;
ALTER  TABLE gc_escalation_cases OWNER TO scd_testuser;
ALTER TABLE gc_escalation_cases ALTER COLUMN ESCALATION_ID SET NOT NULL;
ALTER TABLE gc_escalation_cases ALTER COLUMN CASE_ID SET NOT NULL;


CREATE TABLE gc_open_cases (
	escalation_counter bigint,
	escalation_date timestamp,
	counter_last_owner bigint,
	counter bigint,
	last_owner varchar(200),
	report varchar(200),
	gid1 varchar(200),
	gid2 varchar(200),
	db_entry timestamp
) ;
ALTER  TABLE gc_open_cases OWNER TO scd_testuser;


CREATE TABLE gc_query (
	query_id bigint NOT NULL,
	added_at timestamp NOT NULL,
	cron varchar(100),
	description varchar(500),
	disabled_escalation bigint,
	enabled bigint NOT NULL,
	error_notif_recipients varchar(4000),
	internal bigint NOT NULL,
	name varchar(100) NOT NULL,
	report_code varchar(100) NOT NULL,
	send_owner_notifications bigint NOT NULL,
	query text NOT NULL,
	status varchar(100),
	success_notif_recipients varchar(4000),
	error_notif_template_id bigint,
	notification_template_id bigint,
	success_notif_template_id bigint,
	user_id bigint NOT NULL,
	excluded_client_ids varchar(10),
	excluded_suppliers_gids varchar(100)
) ;
ALTER  TABLE gc_query OWNER TO scd_testuser;
ALTER TABLE gc_query ADD PRIMARY KEY (query_id);
ALTER TABLE gc_query ALTER COLUMN QUERY_ID SET NOT NULL;
ALTER TABLE gc_query ALTER COLUMN ADDED_AT SET NOT NULL;
ALTER TABLE gc_query ALTER COLUMN ENABLED SET NOT NULL;
ALTER TABLE gc_query ALTER COLUMN INTERNAL SET NOT NULL;
ALTER TABLE gc_query ALTER COLUMN NAME SET NOT NULL;
ALTER TABLE gc_query ALTER COLUMN REPORT_CODE SET NOT NULL;
ALTER TABLE gc_query ALTER COLUMN SEND_OWNER_NOTIFICATIONS SET NOT NULL;
ALTER TABLE gc_query ALTER COLUMN QUERY SET NOT NULL;
ALTER TABLE gc_query ALTER COLUMN USER_ID SET NOT NULL;


CREATE TABLE gc_run (
	run_id bigint NOT NULL,
	cases_cleared bigint,
	cases_new bigint,
	ended_at timestamp NOT NULL,
	error_details varchar(4000),
	started_at timestamp NOT NULL,
	status varchar(100) NOT NULL,
	query_id bigint,
	started_by_user_id bigint
) ;
ALTER  TABLE gc_run OWNER TO scd_testuser;
ALTER TABLE gc_run ADD PRIMARY KEY (run_id);
ALTER TABLE gc_run ALTER COLUMN RUN_ID SET NOT NULL;
ALTER TABLE gc_run ALTER COLUMN ENDED_AT SET NOT NULL;
ALTER TABLE gc_run ALTER COLUMN STARTED_AT SET NOT NULL;
ALTER TABLE gc_run ALTER COLUMN STATUS SET NOT NULL;


CREATE TABLE gc_run_data (
	run_data_id bigint NOT NULL,
	added_at timestamp,
	are varchar(255),
	are_2 varchar(255),
	birth_date timestamp,
	birth_date_2 timestamp,
	c varchar(255),
	c_2 varchar(255),
	gid varchar(8),
	gid_2 varchar(8),
	gn varchar(255),
	gn_2 varchar(255),
	is_in_scd bigint,
	l varchar(255),
	l_2 varchar(255),
	leave_date timestamp,
	leave_date_2 timestamp,
	mail varchar(255),
	mail_2 varchar(255),
	o varchar(255),
	o_2 varchar(255),
	ou varchar(255),
	ou_2 varchar(255),
	owner_gid varchar(8) NOT NULL,
	owner_gid_2 varchar(8),
	owner_mail varchar(255),
	owner_mail_2 varchar(255),
	owner_sponsor_mail varchar(255),
	owner_sponsor_mail_2 varchar(255),
	pki varchar(255),
	pki_2 varchar(255),
	probable_creator varchar(8),
	sn varchar(255),
	sn_2 varchar(255),
	sponsor_gid varchar(8),
	sponsor_gid_2 varchar(8),
	user_type varchar(1),
	user_type_2 varchar(1),
	run_id bigint,
	clientid smallint,
	clientid_2 smallint,
	org_code varchar(256),
	record_type char(1),
	org_code_2 varchar(256),
	record_type_2 char(1)
) ;
ALTER  TABLE gc_run_data OWNER TO scd_testuser;
ALTER TABLE gc_run_data ADD PRIMARY KEY (run_data_id);
ALTER TABLE gc_run_data ALTER COLUMN RUN_DATA_ID SET NOT NULL;
ALTER TABLE gc_run_data ALTER COLUMN OWNER_GID SET NOT NULL;


CREATE TABLE gc_two_diff_persons (
	gid1 varchar(10),
	gid2 varchar(10),
	gn1 varchar(200),
	sn1 varchar(200),
	bd1 timestamp,
	gn2 varchar(200),
	sn2 varchar(200),
	bd2 timestamp
) ;
ALTER  TABLE gc_two_diff_persons OWNER TO scd_testuser;


CREATE TABLE gc_user (
	user_id bigint NOT NULL,
	added_at timestamp NOT NULL,
	enabled bigint NOT NULL,
	gid char(8) NOT NULL
) ;
ALTER  TABLE gc_user OWNER TO scd_testuser;
ALTER TABLE gc_user ADD PRIMARY KEY (user_id);
ALTER TABLE gc_user ALTER COLUMN USER_ID SET NOT NULL;
ALTER TABLE gc_user ALTER COLUMN ADDED_AT SET NOT NULL;
ALTER TABLE gc_user ALTER COLUMN ENABLED SET NOT NULL;
ALTER TABLE gc_user ALTER COLUMN GID SET NOT NULL;


CREATE TABLE genehmigungsgrund (
	id bigint,
	genehmigungsgrund varchar(150)
) ;
ALTER  TABLE genehmigungsgrund OWNER TO scd_testuser;


CREATE TABLE help (
	gid char(8)
) ;
ALTER  TABLE help OWNER TO scd_testuser;


CREATE TABLE hotline_partner (
	vertragsnummer bigint,
	geschaeftsjahr varchar(50),
	mailadresse varchar(250),
	name varchar(50),
	vorname varchar(50),
	gid char(8),
	rolle varchar(250)
) ;
ALTER  TABLE hotline_partner OWNER TO scd_testuser;
CREATE UNIQUE INDEX ixhotline_partner ON hotline_partner (vertragsnummer, geschaeftsjahr, rolle, mailadresse);
CREATE INDEX ixhotline_partnerv_nr ON hotline_partner (vertragsnummer);


CREATE TABLE hotline_partner_save (
	vertragsnummer bigint,
	geschaeftsjahr varchar(50),
	mailadresse varchar(250),
	name varchar(50),
	vorname varchar(50),
	gid char(8),
	rolle varchar(250)
) ;
ALTER  TABLE hotline_partner_save OWNER TO scd_testuser;


CREATE TABLE inhalt (
	verteiler_nummer integer,
	laufende_nummer smallint,
	verteiler_art char(1),
	anzahl integer,
	herkunft varchar(255),
	beispiel varchar(255)
) ;
ALTER  TABLE inhalt OWNER TO scd_testuser;
CREATE UNIQUE INDEX ixinhalt ON inhalt (verteiler_nummer, laufende_nummer);


CREATE TABLE konfiguration (
	eigenschaft varchar(250),
	wert varchar(250)
) ;
ALTER  TABLE konfiguration OWNER TO scd_testuser;


CREATE TABLE ldapdaten (
	vertragsnummer bigint,
	geschaeftsjahr varchar(50),
	ip varchar(50),
	dns varchar(50)
) ;
ALTER  TABLE ldapdaten OWNER TO scd_testuser;
CREATE UNIQUE INDEX ixldapdaten ON ldapdaten (vertragsnummer, geschaeftsjahr, ip);
CREATE INDEX ixldapdatenv_nr ON ldapdaten (vertragsnummer);


CREATE TABLE logindaten (
	vertragsnummer bigint,
	geschaeftsjahr varchar(50),
	ip varchar(50),
	dns varchar(50)
) ;
ALTER  TABLE logindaten OWNER TO scd_testuser;
CREATE UNIQUE INDEX ixlogindaten ON logindaten (vertragsnummer, geschaeftsjahr, ip, dns);
CREATE INDEX ixlogindatenv_nr ON logindaten (vertragsnummer);


CREATE TABLE md_additional_properties (
	id bigint NOT NULL,
	connection_id_fk bigint NOT NULL,
	ref_id_fk bigint NOT NULL,
	ref_type varchar(4000) NOT NULL,
	property_order bigint,
	prop_key varchar(4000) NOT NULL,
	value varchar(4000),
	security_group_id bigint NOT NULL DEFAULT 0,
	created_on timestamp NOT NULL DEFAULT statement_timestamp(),
	created_by varchar(255),
	last_updated_on timestamp,
	last_updated_by varchar(255)
) ;
COMMENT ON TABLE md_additional_properties IS E'This table is used to store additional properties in key-value pairs.  It is designed to store "other information" that is not supported in the main database object table.';
COMMENT ON COLUMN md_additional_properties.connection_id_fk IS E'Connection to which this belongs //PARENTFIELD';
COMMENT ON COLUMN md_additional_properties.id IS E'Primary Key';
COMMENT ON COLUMN md_additional_properties.prop_key IS E'The keyname for this property';
COMMENT ON COLUMN md_additional_properties.property_order IS E'This is to handle a situation where multiple properties have a relevant order, or multiple properties have multiple values';
COMMENT ON COLUMN md_additional_properties.ref_id_fk IS E'The object to which this property blongs';
COMMENT ON COLUMN md_additional_properties.ref_type IS E'Type of object that this property belongs to';
COMMENT ON COLUMN md_additional_properties.value IS E'The value for this property';
ALTER  TABLE md_additional_properties OWNER TO scd_testuser;
ALTER TABLE md_additional_properties ADD PRIMARY KEY (id);
ALTER TABLE md_additional_properties ALTER COLUMN ID SET NOT NULL;
ALTER TABLE md_additional_properties ALTER COLUMN CONNECTION_ID_FK SET NOT NULL;
ALTER TABLE md_additional_properties ALTER COLUMN REF_ID_FK SET NOT NULL;
ALTER TABLE md_additional_properties ALTER COLUMN REF_TYPE SET NOT NULL;
ALTER TABLE md_additional_properties ALTER COLUMN PROP_KEY SET NOT NULL;
ALTER TABLE md_additional_properties ALTER COLUMN SECURITY_GROUP_ID SET NOT NULL;
ALTER TABLE md_additional_properties ALTER COLUMN CREATED_ON SET NOT NULL;


CREATE TABLE md_applicationfiles (
	id bigint NOT NULL,
	applications_id_fk bigint NOT NULL,
	name varchar(200) NOT NULL,
	uri varchar(4000) NOT NULL,
	type varchar(100) NOT NULL,
	state varchar(100) NOT NULL,
	language varchar(100),
	loc bigint,
	security_group_id bigint NOT NULL DEFAULT 0,
	created_on timestamp NOT NULL DEFAULT statement_timestamp(),
	created_by varchar(4000),
	updated_on timestamp,
	updated_by varchar(4000)
) ;
COMMENT ON TABLE md_applicationfiles IS E'Holds a tuple for each file that is being processed whether it is changed or not.';
COMMENT ON COLUMN md_applicationfiles.created_by IS E'APEX';
COMMENT ON COLUMN md_applicationfiles.created_on IS E'APEX';
COMMENT ON COLUMN md_applicationfiles.language IS E'Language of the file that has been processed.';
COMMENT ON COLUMN md_applicationfiles.name IS E'file name  //OBJECTNAME';
COMMENT ON COLUMN md_applicationfiles.security_group_id IS E'APEX';
COMMENT ON COLUMN md_applicationfiles.state IS E'State will be how this file is operated on.  For example. it will be OPEN, NEW, FIXED, IGNORED, REVIEWED, COMPLETE';
COMMENT ON COLUMN md_applicationfiles.type IS E'This will denote the type of file we have, including DIR, FILE (text), BINARY, IGNORE (where we choose to ignore files)';
COMMENT ON COLUMN md_applicationfiles.updated_by IS E'APEX';
COMMENT ON COLUMN md_applicationfiles.updated_on IS E'APEX';
COMMENT ON COLUMN md_applicationfiles.uri IS E'The uri is the part of the file url after the base dir has been removed.  See MD_APPLICATION for base dir';
ALTER  TABLE md_applicationfiles OWNER TO scd_testuser;
CREATE INDEX md_app_file_type_idx ON md_applicationfiles (type, id);
CREATE INDEX md_state_type__id ON md_applicationfiles (state, type, id);
ALTER TABLE md_applicationfiles ADD PRIMARY KEY (id);
ALTER TABLE md_applicationfiles ALTER COLUMN ID SET NOT NULL;
ALTER TABLE md_applicationfiles ALTER COLUMN APPLICATIONS_ID_FK SET NOT NULL;
ALTER TABLE md_applicationfiles ALTER COLUMN NAME SET NOT NULL;
ALTER TABLE md_applicationfiles ALTER COLUMN URI SET NOT NULL;
ALTER TABLE md_applicationfiles ALTER COLUMN TYPE SET NOT NULL;
ALTER TABLE md_applicationfiles ALTER COLUMN STATE SET NOT NULL;
ALTER TABLE md_applicationfiles ALTER COLUMN SECURITY_GROUP_ID SET NOT NULL;
ALTER TABLE md_applicationfiles ALTER COLUMN CREATED_ON SET NOT NULL;


CREATE TABLE md_applications (
	id bigint NOT NULL,
	name varchar(4000),
	description varchar(4000),
	base_dir varchar(4000),
	output_dir varchar(4000),
	backup_dir varchar(4000),
	inplace bigint,
	project_id_fk bigint NOT NULL,
	security_group_id bigint NOT NULL DEFAULT 0,
	created_on timestamp NOT NULL DEFAULT statement_timestamp(),
	created_by varchar(255),
	last_updated_on timestamp,
	last_updated_by varchar(255)
) ;
COMMENT ON TABLE md_applications IS E'This is the base table for application projects.  It holds the base information for applications associated with a database';
COMMENT ON COLUMN md_applications.backup_dir IS E'This is the directory in which the application files are backed up if a backp is chosen';
COMMENT ON COLUMN md_applications.base_dir IS E'This is the base src directory for the application.  It could be an svn checkout, a clearcase view or something similar';
COMMENT ON COLUMN md_applications.description IS E'Overview of what the application does.';
COMMENT ON COLUMN md_applications.id IS E'Primary Key';
COMMENT ON COLUMN md_applications.inplace IS E'Designates whether the changes have been made inplace, in the source directory or not';
COMMENT ON COLUMN md_applications.name IS E'Name of the application suite  //OBJECTNAME';
COMMENT ON COLUMN md_applications.output_dir IS E'This is the output directory where the scanner will present the converted files, if there are converted or modified.';
COMMENT ON COLUMN md_applications.project_id_fk IS E'project of the database(s) this application relates to';
ALTER  TABLE md_applications OWNER TO scd_testuser;
ALTER TABLE md_applications ADD PRIMARY KEY (id);
ALTER TABLE md_applications ALTER COLUMN ID SET NOT NULL;
ALTER TABLE md_applications ALTER COLUMN PROJECT_ID_FK SET NOT NULL;
ALTER TABLE md_applications ALTER COLUMN SECURITY_GROUP_ID SET NOT NULL;
ALTER TABLE md_applications ALTER COLUMN CREATED_ON SET NOT NULL;


CREATE TABLE md_catalogs (
	id bigint NOT NULL,
	connection_id_fk bigint NOT NULL,
	catalog_name varchar(4000),
	dummy_flag char(1) DEFAULT 'N',
	native_sql text,
	native_key varchar(4000),
	comments varchar(4000),
	security_group_id bigint NOT NULL DEFAULT 0,
	created_on timestamp NOT NULL DEFAULT statement_timestamp(),
	created_by varchar(255),
	last_updated_on timestamp,
	last_updated_by varchar(255)
) ;
COMMENT ON TABLE md_catalogs IS E'Store catalogs in this table.';
COMMENT ON COLUMN md_catalogs.catalog_name IS E'Name of the catalog //OBJECTNAME';
COMMENT ON COLUMN md_catalogs.connection_id_fk IS E'Foreign key into the connections table - Shows what connection this catalog belongs to //PARENTFIELD';
COMMENT ON COLUMN md_catalogs.dummy_flag IS E'Flag to show if this catalog is a "dummy" catalog which is used as a placeholder for those platforms that do not support catalogs.  ''N'' signifies that this is NOT a dummy catalog, while ''Y'' signifies that it is.';
COMMENT ON COLUMN md_catalogs.native_key IS E'A unique identifier used to identify the catalog at source.';
COMMENT ON COLUMN md_catalogs.native_sql IS E'THe SQL used to create this catalog';
ALTER  TABLE md_catalogs OWNER TO scd_testuser;
ALTER TABLE md_catalogs ADD PRIMARY KEY (id);
ALTER TABLE md_catalogs ALTER COLUMN ID SET NOT NULL;
ALTER TABLE md_catalogs ALTER COLUMN CONNECTION_ID_FK SET NOT NULL;
ALTER TABLE md_catalogs ALTER COLUMN SECURITY_GROUP_ID SET NOT NULL;
ALTER TABLE md_catalogs ALTER COLUMN CREATED_ON SET NOT NULL;


CREATE TABLE md_code_regex (
	id bigint NOT NULL,
	regex varchar(100) NOT NULL,
	description varchar(200) NOT NULL
) ;
COMMENT ON COLUMN md_code_regex.id IS E'ID of regex for searching source code';
COMMENT ON COLUMN md_code_regex.regex IS E'Regex to use in reports of artifiacts in code.  This will be used for customers to analyze what is in their code.';
ALTER  TABLE md_code_regex OWNER TO scd_testuser;
ALTER TABLE md_code_regex ALTER COLUMN ID SET NOT NULL;
ALTER TABLE md_code_regex ALTER COLUMN REGEX SET NOT NULL;
ALTER TABLE md_code_regex ALTER COLUMN DESCRIPTION SET NOT NULL;


CREATE TABLE md_columns (
	id bigint NOT NULL,
	table_id_fk bigint NOT NULL,
	column_name varchar(4000) NOT NULL,
	column_order bigint NOT NULL,
	column_type varchar(4000),
	precision bigint,
	scale bigint,
	nullable char(1) NOT NULL,
	default_value varchar(4000),
	native_sql text,
	native_key varchar(4000),
	datatype_transformed_flag char(1),
	comments varchar(4000),
	security_group_id bigint NOT NULL DEFAULT 0,
	created_by varchar(255),
	created_on timestamp NOT NULL DEFAULT statement_timestamp(),
	last_updated_by varchar(255),
	last_updated_on timestamp
) ;
COMMENT ON TABLE md_columns IS E'Column information is stored in this table.';
COMMENT ON COLUMN md_columns.column_name IS E'The name of the column //OBJECTNAME';
COMMENT ON COLUMN md_columns.column_order IS E'The order this appears in the table';
COMMENT ON COLUMN md_columns.column_type IS E'The type of the column';
COMMENT ON COLUMN md_columns.datatype_transformed_flag IS E'This is set to ''Y'' to show if the data type was transformed.  This is useful so we don''t apply more than 1 datatype transformation to a column';
COMMENT ON COLUMN md_columns.default_value IS E'Default value on the column';
COMMENT ON COLUMN md_columns.id IS E'Primary Key';
COMMENT ON COLUMN md_columns.native_key IS E'Unique identifier for this object at source';
COMMENT ON COLUMN md_columns.native_sql IS E'The SQL used to create this column at source';
COMMENT ON COLUMN md_columns.nullable IS E'Yes or No.  Null signifies NO';
COMMENT ON COLUMN md_columns.precision IS E'The precision on the column';
COMMENT ON COLUMN md_columns.scale IS E'The scale of the column';
COMMENT ON COLUMN md_columns.table_id_fk IS E'The table that this column is part of //PARENTFIELD';
ALTER  TABLE md_columns OWNER TO scd_testuser;
ALTER TABLE md_columns ADD PRIMARY KEY (id);
ALTER TABLE md_columns ADD CONSTRAINT md_columns_nullable_y_n CHECK ((UPPER(nullable) IN ('Y','N')));
ALTER TABLE md_columns ALTER COLUMN ID SET NOT NULL;
ALTER TABLE md_columns ALTER COLUMN TABLE_ID_FK SET NOT NULL;
ALTER TABLE md_columns ALTER COLUMN COLUMN_NAME SET NOT NULL;
ALTER TABLE md_columns ALTER COLUMN COLUMN_ORDER SET NOT NULL;
ALTER TABLE md_columns ALTER COLUMN NULLABLE SET NOT NULL;
ALTER TABLE md_columns ALTER COLUMN SECURITY_GROUP_ID SET NOT NULL;
ALTER TABLE md_columns ALTER COLUMN CREATED_ON SET NOT NULL;


CREATE TABLE md_connections (
	id bigint NOT NULL,
	project_id_fk bigint NOT NULL,
	type varchar(4000),
	host varchar(4000),
	port bigint,
	username varchar(4000),
	password varchar(4000),
	dburl varchar(4000),
	name varchar(255),
	native_sql text,
	status varchar(30),
	num_catalogs bigint,
	num_columns bigint,
	num_constraints bigint,
	num_groups bigint,
	num_roles bigint,
	num_indexes bigint,
	num_other_objects bigint,
	num_packages bigint,
	num_privileges bigint,
	num_schemas bigint,
	num_sequences bigint,
	num_stored_programs bigint,
	num_synonyms bigint,
	num_tables bigint,
	num_tablespaces bigint,
	num_triggers bigint,
	num_user_defined_data_types bigint,
	num_users bigint,
	num_views bigint,
	comments varchar(4000),
	security_group_id bigint NOT NULL DEFAULT 0,
	created_on timestamp NOT NULL DEFAULT statement_timestamp(),
	created_by varchar(255),
	last_updated_on timestamp,
	last_updated_by varchar(255)
) ;
COMMENT ON TABLE md_connections IS E'This table is used to store connection information.  For example, in migrations, we could be carrying out a consolidation which occurs across many connections.';
COMMENT ON COLUMN md_connections.dburl IS E'The database url used to make this connection';
COMMENT ON COLUMN md_connections.host IS E'The host to which this connection connects.';
COMMENT ON COLUMN md_connections.id IS E'Primary key';
COMMENT ON COLUMN md_connections.name IS E'//OBJECTNAME';
COMMENT ON COLUMN md_connections.native_sql IS E'The native sql used to create this connection';
COMMENT ON COLUMN md_connections.password IS E'The password used to make this connection';
COMMENT ON COLUMN md_connections.port IS E'The port to which this connection connects';
COMMENT ON COLUMN md_connections.project_id_fk IS E'The project to which this connection belongs //PARENTFIELD';
COMMENT ON COLUMN md_connections.status IS E'Status of Migration, = captured,converted,generated,datamoved';
COMMENT ON COLUMN md_connections.type IS E'The type of the connection - For example it could be used to store "ORACLE" or "MYSQL"';
COMMENT ON COLUMN md_connections.username IS E'The username used to make the connection';
ALTER  TABLE md_connections OWNER TO scd_testuser;
ALTER TABLE md_connections ADD PRIMARY KEY (id);
ALTER TABLE md_connections ALTER COLUMN ID SET NOT NULL;
ALTER TABLE md_connections ALTER COLUMN PROJECT_ID_FK SET NOT NULL;
ALTER TABLE md_connections ALTER COLUMN SECURITY_GROUP_ID SET NOT NULL;
ALTER TABLE md_connections ALTER COLUMN CREATED_ON SET NOT NULL;


CREATE TABLE md_constraints (
	id bigint NOT NULL,
	delete_clause varchar(4000),
	name varchar(4000),
	constraint_type varchar(4000),
	table_id_fk bigint NOT NULL,
	reftable_id_fk bigint,
	constraint_text text,
	language varchar(40) NOT NULL,
	comments varchar(4000),
	security_group_id bigint NOT NULL DEFAULT 0,
	created_on timestamp NOT NULL DEFAULT statement_timestamp(),
	created_by varchar(255),
	last_updated_on timestamp,
	last_updated_by varchar(255)
) ;
COMMENT ON TABLE md_constraints IS E'Table for storing information about a constraint';
COMMENT ON COLUMN md_constraints.constraint_text IS E'The text of the constraint';
COMMENT ON COLUMN md_constraints.constraint_type IS E'Type of the constraint (e.g. CHECK)';
COMMENT ON COLUMN md_constraints.delete_clause IS E'delete option , can be either CASCADE, RESTRICT or NULL';
COMMENT ON COLUMN md_constraints.id IS E'Primary Key';
COMMENT ON COLUMN md_constraints.language IS E'//PUBLIC';
COMMENT ON COLUMN md_constraints.name IS E'Name of the constraint //OBJECTNAME';
COMMENT ON COLUMN md_constraints.reftable_id_fk IS E'Used in foreign keys - this gives the table that we refer to.';
COMMENT ON COLUMN md_constraints.table_id_fk IS E'Table on which this constraint exists //PARENTFIELD';
ALTER  TABLE md_constraints OWNER TO scd_testuser;
ALTER TABLE md_constraints ADD PRIMARY KEY (id);
ALTER TABLE md_constraints ALTER COLUMN ID SET NOT NULL;
ALTER TABLE md_constraints ALTER COLUMN TABLE_ID_FK SET NOT NULL;
ALTER TABLE md_constraints ALTER COLUMN LANGUAGE SET NOT NULL;
ALTER TABLE md_constraints ALTER COLUMN SECURITY_GROUP_ID SET NOT NULL;
ALTER TABLE md_constraints ALTER COLUMN CREATED_ON SET NOT NULL;


CREATE TABLE md_constraint_details (
	id bigint NOT NULL,
	ref_flag char(1) DEFAULT 'N',
	constraint_id_fk bigint NOT NULL,
	column_id_fk bigint,
	column_portion bigint,
	constraint_text text,
	detail_order bigint NOT NULL,
	security_group_id bigint NOT NULL DEFAULT 0,
	created_on timestamp NOT NULL DEFAULT statement_timestamp(),
	created_by varchar(255),
	last_updated_on timestamp,
	last_updated_by varchar(255)
) ;
COMMENT ON TABLE md_constraint_details IS E'Constraint details show what columns are "involved" in a constraint.';
COMMENT ON COLUMN md_constraint_details.column_portion IS E'The portion of a column this detail belongs (e.g. for constrints on substrings)';
COMMENT ON COLUMN md_constraint_details.constraint_id_fk IS E'Constraint that this detail belongs to //PARENTFIELD';
COMMENT ON COLUMN md_constraint_details.constraint_text IS E'The text of the constraint';
COMMENT ON COLUMN md_constraint_details.id IS E'Primary Key';
COMMENT ON COLUMN md_constraint_details.ref_flag IS E'"N" or Null signify that this column is the colum that is used in the constraint.  A flag of Y signifies that the colum is a referenced column (i.e. part of a foreign key constraint)';
ALTER  TABLE md_constraint_details OWNER TO scd_testuser;
ALTER TABLE md_constraint_details ADD PRIMARY KEY (id);
ALTER TABLE md_constraint_details ALTER COLUMN ID SET NOT NULL;
ALTER TABLE md_constraint_details ALTER COLUMN CONSTRAINT_ID_FK SET NOT NULL;
ALTER TABLE md_constraint_details ALTER COLUMN DETAIL_ORDER SET NOT NULL;
ALTER TABLE md_constraint_details ALTER COLUMN SECURITY_GROUP_ID SET NOT NULL;
ALTER TABLE md_constraint_details ALTER COLUMN CREATED_ON SET NOT NULL;


CREATE TABLE md_derivatives (
	id bigint NOT NULL,
	src_id bigint NOT NULL,
	src_type varchar(4000),
	derived_id bigint NOT NULL,
	derived_type varchar(4000),
	derived_connection_id_fk bigint NOT NULL,
	transformed char(1),
	original_identifier varchar(4000),
	new_identifier varchar(4000),
	derived_object_namespace varchar(40),
	derivative_reason varchar(10),
	security_group_id bigint NOT NULL DEFAULT 0,
	created_on timestamp NOT NULL DEFAULT statement_timestamp(),
	created_by varchar(255),
	last_updated_on timestamp,
	last_updated_by varchar(255),
	enabled char(1) DEFAULT 'Y'
) ;
COMMENT ON TABLE md_derivatives IS E'This table is used to store objects that are derived from each other.  For example in a migration an auto-increment column in a source model could be mapped to a primary key, and a sequence, and a trigger.  The MD_DERIVATIVES table would store the fact that these 3 objects are derived from the auto-increment column.';
COMMENT ON COLUMN md_derivatives.transformed IS E'Set this field to ''Y'' if we carry out any sort of transformation on teh derived object.';
ALTER  TABLE md_derivatives OWNER TO scd_testuser;
ALTER TABLE md_derivatives ADD PRIMARY KEY (id);
ALTER TABLE md_derivatives ADD CONSTRAINT migrder_chk CHECK (enabled = 'Y' OR enabled = 'y' OR enabled = 'N' OR  enabled = 'n');
ALTER TABLE md_derivatives ALTER COLUMN ID SET NOT NULL;
ALTER TABLE md_derivatives ALTER COLUMN SRC_ID SET NOT NULL;
ALTER TABLE md_derivatives ALTER COLUMN DERIVED_ID SET NOT NULL;
ALTER TABLE md_derivatives ALTER COLUMN DERIVED_CONNECTION_ID_FK SET NOT NULL;
ALTER TABLE md_derivatives ALTER COLUMN SECURITY_GROUP_ID SET NOT NULL;
ALTER TABLE md_derivatives ALTER COLUMN CREATED_ON SET NOT NULL;


CREATE TABLE md_file_artifacts (
	id bigint NOT NULL,
	applicationfiles_id bigint NOT NULL,
	pattern varchar(4000),
	string_found varchar(4000),
	string_replaced varchar(4000),
	type varchar(200),
	status varchar(4000),
	line bigint,
	pattern_start bigint,
	pattern_end bigint,
	due_date timestamp,
	db_type varchar(100),
	code_type varchar(1000),
	description varchar(4000),
	priority numeric(38),
	security_group_id varchar(20) NOT NULL DEFAULT '0',
	created_on timestamp NOT NULL DEFAULT statement_timestamp(),
	created_by varchar(4000),
	last_updated timestamp,
	last_updated_by varchar(4000)
) ;
COMMENT ON TABLE md_file_artifacts IS E'Holds a tuple for each interesting thing the scanner finds in a file';
COMMENT ON COLUMN md_file_artifacts.code_type IS E'Source code db api, like dblib, jdbc';
COMMENT ON COLUMN md_file_artifacts.db_type IS E'Source database calls type';
COMMENT ON COLUMN md_file_artifacts.description IS E'This is a description of the artifact which will have a default generated by the scanner and then can be modified by the user to be more appropriate for their use';
COMMENT ON COLUMN md_file_artifacts.due_date IS E'Due date is used by the TODO mechanism to manage the validation and work to complete this change';
COMMENT ON COLUMN md_file_artifacts.pattern IS E'Pattern used to search source file for interesting artifiacts';
COMMENT ON COLUMN md_file_artifacts.priority IS E'The priority is set for the TODOs so they can be managed by the user';
COMMENT ON COLUMN md_file_artifacts.status IS E'Pattern used to search source file for interesting artifiacts';
COMMENT ON COLUMN md_file_artifacts.string_found IS E'String found in source from the pattern supplied';
COMMENT ON COLUMN md_file_artifacts.string_replaced IS E'This is the string which replace the string found if it was replaced.';
COMMENT ON COLUMN md_file_artifacts.type IS E'This is the type of the replacement.  It could be a straight replace from a replacement pattern, or we could have passed the string to a translator which would change the string depending on the database.';
ALTER  TABLE md_file_artifacts OWNER TO scd_testuser;
ALTER TABLE md_file_artifacts ADD PRIMARY KEY (id);
ALTER TABLE md_file_artifacts ALTER COLUMN APPLICATIONFILES_ID SET NOT NULL;
ALTER TABLE md_file_artifacts ALTER COLUMN ID SET NOT NULL;
ALTER TABLE md_file_artifacts ALTER COLUMN SECURITY_GROUP_ID SET NOT NULL;
ALTER TABLE md_file_artifacts ALTER COLUMN CREATED_ON SET NOT NULL;


CREATE TABLE md_groups (
	id bigint NOT NULL,
	schema_id_fk bigint NOT NULL,
	group_name varchar(4000),
	group_flag char(1),
	native_sql text,
	native_key varchar(4000),
	comments varchar(4000),
	security_group_id bigint NOT NULL DEFAULT 0,
	created_on timestamp NOT NULL DEFAULT statement_timestamp(),
	created_by varchar(255),
	last_updated_on timestamp,
	last_updated_by varchar(255)
) ;
COMMENT ON TABLE md_groups IS E'Groups of users in a schema';
COMMENT ON COLUMN md_groups.group_flag IS E'This is a flag to signify a group or a role.  If this is ''R'' it means the group is known as a Role.  Any other value means it is known as a group.';
COMMENT ON COLUMN md_groups.group_name IS E'Name of the group //OBJECTNAME';
COMMENT ON COLUMN md_groups.id IS E'Primary Key';
COMMENT ON COLUMN md_groups.native_key IS E'Unique id for this object at source';
COMMENT ON COLUMN md_groups.native_sql IS E'SQL Used to generate this object at source';
COMMENT ON COLUMN md_groups.schema_id_fk IS E'Schema in which this object belongs //PARENTFIELD';
ALTER  TABLE md_groups OWNER TO scd_testuser;
ALTER TABLE md_groups ADD PRIMARY KEY (id);
ALTER TABLE md_groups ALTER COLUMN ID SET NOT NULL;
ALTER TABLE md_groups ALTER COLUMN SCHEMA_ID_FK SET NOT NULL;
ALTER TABLE md_groups ALTER COLUMN SECURITY_GROUP_ID SET NOT NULL;
ALTER TABLE md_groups ALTER COLUMN CREATED_ON SET NOT NULL;


CREATE TABLE md_group_members (
	id bigint NOT NULL,
	group_id_fk bigint NOT NULL,
	user_id_fk bigint,
	group_member_id_fk bigint,
	security_group_id bigint NOT NULL DEFAULT 0,
	created_on timestamp NOT NULL DEFAULT statement_timestamp(),
	created_by varchar(255),
	last_updated_on timestamp,
	last_updated_by varchar(255)
) ;
COMMENT ON TABLE md_group_members IS E'This table is used to store the members of a group.';
COMMENT ON COLUMN md_group_members.group_member_id_fk IS E'groups can be members of groups';
COMMENT ON COLUMN md_group_members.id IS E'Primary Key';
COMMENT ON COLUMN md_group_members.user_id_fk IS E'Id of member';
ALTER  TABLE md_group_members OWNER TO scd_testuser;
ALTER TABLE md_group_members ADD PRIMARY KEY (id);
ALTER TABLE md_group_members ALTER COLUMN ID SET NOT NULL;
ALTER TABLE md_group_members ALTER COLUMN GROUP_ID_FK SET NOT NULL;
ALTER TABLE md_group_members ALTER COLUMN SECURITY_GROUP_ID SET NOT NULL;
ALTER TABLE md_group_members ALTER COLUMN CREATED_ON SET NOT NULL;


CREATE TABLE md_group_privileges (
	id bigint NOT NULL,
	group_id_fk bigint NOT NULL,
	privilege_id_fk bigint NOT NULL,
	security_group_id bigint NOT NULL DEFAULT 0,
	created_on timestamp NOT NULL DEFAULT statement_timestamp(),
	created_by varchar(255),
	last_updated_on timestamp,
	last_updated_by varchar(255)
) ;
COMMENT ON TABLE md_group_privileges IS E'This table stores the privileges granted to a group (or role)';
ALTER  TABLE md_group_privileges OWNER TO scd_testuser;
ALTER TABLE md_group_privileges ADD PRIMARY KEY (id);
ALTER TABLE md_group_privileges ALTER COLUMN ID SET NOT NULL;
ALTER TABLE md_group_privileges ALTER COLUMN GROUP_ID_FK SET NOT NULL;
ALTER TABLE md_group_privileges ALTER COLUMN PRIVILEGE_ID_FK SET NOT NULL;
ALTER TABLE md_group_privileges ALTER COLUMN SECURITY_GROUP_ID SET NOT NULL;
ALTER TABLE md_group_privileges ALTER COLUMN CREATED_ON SET NOT NULL;


CREATE TABLE md_indexes (
	id bigint NOT NULL,
	index_type varchar(4000),
	table_id_fk bigint NOT NULL,
	index_name varchar(4000),
	native_sql text,
	native_key varchar(4000),
	comments varchar(4000),
	security_group_id bigint NOT NULL DEFAULT 0,
	created_on timestamp NOT NULL DEFAULT statement_timestamp(),
	created_by varchar(255),
	last_updated_on timestamp,
	last_updated_by varchar(4000)
) ;
COMMENT ON TABLE md_indexes IS E'This table is used to store information about the indexes in a schema';
COMMENT ON COLUMN md_indexes.id IS E'Primary Key';
COMMENT ON COLUMN md_indexes.index_name IS E'Name of the index //OBJECTNAME';
COMMENT ON COLUMN md_indexes.index_type IS E'Type of the index e.g. PRIMARY';
COMMENT ON COLUMN md_indexes.native_key IS E'A unique identifier for this object at the source';
COMMENT ON COLUMN md_indexes.native_sql IS E'SQL used to create the index at source';
COMMENT ON COLUMN md_indexes.table_id_fk IS E'Table that this index is on //PARENTFIELD';
ALTER  TABLE md_indexes OWNER TO scd_testuser;
ALTER TABLE md_indexes ADD PRIMARY KEY (id);
ALTER TABLE md_indexes ALTER COLUMN ID SET NOT NULL;
ALTER TABLE md_indexes ALTER COLUMN TABLE_ID_FK SET NOT NULL;
ALTER TABLE md_indexes ALTER COLUMN SECURITY_GROUP_ID SET NOT NULL;
ALTER TABLE md_indexes ALTER COLUMN CREATED_ON SET NOT NULL;


CREATE TABLE md_index_details (
	id bigint NOT NULL,
	index_id_fk bigint NOT NULL,
	column_id_fk bigint NOT NULL,
	index_portion bigint,
	detail_order bigint NOT NULL,
	security_group_id bigint NOT NULL DEFAULT 0,
	created_on timestamp NOT NULL DEFAULT statement_timestamp(),
	created_by varchar(255),
	last_updated_on timestamp,
	last_updated_by varchar(255)
) ;
COMMENT ON TABLE md_index_details IS E'This table stores the details of an index.  It shows what columns are "part" of the index.';
COMMENT ON COLUMN md_index_details.index_id_fk IS E'The index to which this detail belongs. //PARENTFIELD';
COMMENT ON COLUMN md_index_details.index_portion IS E'To support indexing on part of a field';
ALTER  TABLE md_index_details OWNER TO scd_testuser;
ALTER TABLE md_index_details ADD PRIMARY KEY (id);
ALTER TABLE md_index_details ALTER COLUMN ID SET NOT NULL;
ALTER TABLE md_index_details ALTER COLUMN INDEX_ID_FK SET NOT NULL;
ALTER TABLE md_index_details ALTER COLUMN COLUMN_ID_FK SET NOT NULL;
ALTER TABLE md_index_details ALTER COLUMN DETAIL_ORDER SET NOT NULL;
ALTER TABLE md_index_details ALTER COLUMN SECURITY_GROUP_ID SET NOT NULL;
ALTER TABLE md_index_details ALTER COLUMN CREATED_ON SET NOT NULL;


CREATE TABLE md_migr_dependency (
	id bigint NOT NULL,
	connection_id_fk bigint NOT NULL,
	parent_id bigint NOT NULL,
	child_id bigint NOT NULL,
	parent_object_type varchar(4000) NOT NULL,
	child_object_type varchar(4000) NOT NULL,
	security_group_id bigint NOT NULL DEFAULT 0,
	created_on timestamp NOT NULL DEFAULT statement_timestamp(),
	created_by varchar(255),
	last_updated_on timestamp,
	last_updated_by varchar(255)
) ;
COMMENT ON COLUMN md_migr_dependency.connection_id_fk IS E'The connection that this exists in //PARENTFIELD';
ALTER  TABLE md_migr_dependency OWNER TO scd_testuser;
ALTER TABLE md_migr_dependency ADD PRIMARY KEY (id);
ALTER TABLE md_migr_dependency ALTER COLUMN ID SET NOT NULL;
ALTER TABLE md_migr_dependency ALTER COLUMN CONNECTION_ID_FK SET NOT NULL;
ALTER TABLE md_migr_dependency ALTER COLUMN PARENT_ID SET NOT NULL;
ALTER TABLE md_migr_dependency ALTER COLUMN CHILD_ID SET NOT NULL;
ALTER TABLE md_migr_dependency ALTER COLUMN PARENT_OBJECT_TYPE SET NOT NULL;
ALTER TABLE md_migr_dependency ALTER COLUMN CHILD_OBJECT_TYPE SET NOT NULL;
ALTER TABLE md_migr_dependency ALTER COLUMN SECURITY_GROUP_ID SET NOT NULL;
ALTER TABLE md_migr_dependency ALTER COLUMN CREATED_ON SET NOT NULL;


CREATE TABLE md_migr_parameter (
	id bigint NOT NULL,
	connection_id_fk bigint NOT NULL,
	object_id bigint NOT NULL,
	object_type varchar(4000) NOT NULL,
	param_existing bigint NOT NULL,
	param_order bigint NOT NULL,
	param_name varchar(4000) NOT NULL,
	param_type varchar(4000) NOT NULL,
	param_data_type varchar(4000) NOT NULL,
	percision bigint,
	scale bigint,
	nullable char(1) NOT NULL,
	default_value varchar(4000),
	security_group_id bigint NOT NULL DEFAULT 0,
	created_on timestamp NOT NULL DEFAULT statement_timestamp(),
	created_by varchar(255),
	last_updated_on timestamp,
	last_updated_by varchar(255)
) ;
COMMENT ON COLUMN md_migr_parameter.connection_id_fk IS E'the connection in which this belongs //PARENTFIELD';
COMMENT ON COLUMN md_migr_parameter.param_existing IS E'1 represents a new parameter for PL/SQL that was not present in the origional. 0 represents a n existing parameter that was present in the origional';
COMMENT ON COLUMN md_migr_parameter.param_order IS E'IF -1 THEN THIS PARAM IS A RETURN PARAMETER. 1 WILL BE THE FIRST PARAMETER IN THE PARAMETER LIST';
ALTER  TABLE md_migr_parameter OWNER TO scd_testuser;
ALTER TABLE md_migr_parameter ADD PRIMARY KEY (id);
ALTER TABLE md_migr_parameter ALTER COLUMN ID SET NOT NULL;
ALTER TABLE md_migr_parameter ALTER COLUMN CONNECTION_ID_FK SET NOT NULL;
ALTER TABLE md_migr_parameter ALTER COLUMN OBJECT_ID SET NOT NULL;
ALTER TABLE md_migr_parameter ALTER COLUMN OBJECT_TYPE SET NOT NULL;
ALTER TABLE md_migr_parameter ALTER COLUMN PARAM_EXISTING SET NOT NULL;
ALTER TABLE md_migr_parameter ALTER COLUMN PARAM_ORDER SET NOT NULL;
ALTER TABLE md_migr_parameter ALTER COLUMN PARAM_NAME SET NOT NULL;
ALTER TABLE md_migr_parameter ALTER COLUMN PARAM_TYPE SET NOT NULL;
ALTER TABLE md_migr_parameter ALTER COLUMN PARAM_DATA_TYPE SET NOT NULL;
ALTER TABLE md_migr_parameter ALTER COLUMN NULLABLE SET NOT NULL;
ALTER TABLE md_migr_parameter ALTER COLUMN SECURITY_GROUP_ID SET NOT NULL;
ALTER TABLE md_migr_parameter ALTER COLUMN CREATED_ON SET NOT NULL;


CREATE TABLE md_migr_weakdep (
	id bigint NOT NULL,
	connection_id_fk bigint NOT NULL,
	schema_id_fk bigint NOT NULL,
	parent_id bigint NOT NULL,
	child_name varchar(4000) NOT NULL,
	parent_type varchar(4000) NOT NULL,
	child_type varchar(4000) NOT NULL,
	security_group_id bigint NOT NULL DEFAULT 0,
	created_on timestamp NOT NULL DEFAULT statement_timestamp(),
	created_by varchar(255),
	last_updated_on timestamp,
	last_updated_by varchar(255)
) ;
COMMENT ON COLUMN md_migr_weakdep.child_name IS E'name of the child,  as weak dependencies dont have reference to child id';
COMMENT ON COLUMN md_migr_weakdep.child_type IS E'Generic Type (not MD_<tablename>)';
COMMENT ON COLUMN md_migr_weakdep.parent_type IS E'MD_<tablename>';
ALTER  TABLE md_migr_weakdep OWNER TO scd_testuser;
ALTER TABLE md_migr_weakdep ADD PRIMARY KEY (id);
ALTER TABLE md_migr_weakdep ALTER COLUMN ID SET NOT NULL;
ALTER TABLE md_migr_weakdep ALTER COLUMN CONNECTION_ID_FK SET NOT NULL;
ALTER TABLE md_migr_weakdep ALTER COLUMN SCHEMA_ID_FK SET NOT NULL;
ALTER TABLE md_migr_weakdep ALTER COLUMN PARENT_ID SET NOT NULL;
ALTER TABLE md_migr_weakdep ALTER COLUMN CHILD_NAME SET NOT NULL;
ALTER TABLE md_migr_weakdep ALTER COLUMN PARENT_TYPE SET NOT NULL;
ALTER TABLE md_migr_weakdep ALTER COLUMN CHILD_TYPE SET NOT NULL;
ALTER TABLE md_migr_weakdep ALTER COLUMN SECURITY_GROUP_ID SET NOT NULL;
ALTER TABLE md_migr_weakdep ALTER COLUMN CREATED_ON SET NOT NULL;


CREATE TABLE "md_numrow$source" (
	numrows bigint,
	name varchar(4000),
	objid bigint
) ;


CREATE TABLE "md_numrow$target" (
	numrows bigint,
	name varchar(4000),
	objid bigint
) ;


CREATE TABLE md_other_objects (
	id bigint NOT NULL,
	schema_id_fk bigint NOT NULL,
	name varchar(4000),
	native_sql text,
	native_key varchar(4000),
	comments varchar(4000),
	security_group_id bigint NOT NULL DEFAULT 0,
	created_on timestamp NOT NULL DEFAULT statement_timestamp(),
	created_by varchar(255),
	last_updated_on timestamp,
	last_updated_by varchar(255)
) ;
COMMENT ON TABLE md_other_objects IS E'For storing objects that don''''t belong anywhere else';
COMMENT ON COLUMN md_other_objects.id IS E'Primary Key';
COMMENT ON COLUMN md_other_objects.name IS E'Name of this object //OBJECTNAME';
COMMENT ON COLUMN md_other_objects.native_key IS E'A key that identifies this object at source.';
COMMENT ON COLUMN md_other_objects.native_sql IS E'The native SQL used to create this object';
COMMENT ON COLUMN md_other_objects.schema_id_fk IS E'Schema to which this object blongs. //PARENTFIELD';
ALTER  TABLE md_other_objects OWNER TO scd_testuser;
ALTER TABLE md_other_objects ADD PRIMARY KEY (id);
ALTER TABLE md_other_objects ALTER COLUMN ID SET NOT NULL;
ALTER TABLE md_other_objects ALTER COLUMN SCHEMA_ID_FK SET NOT NULL;
ALTER TABLE md_other_objects ALTER COLUMN SECURITY_GROUP_ID SET NOT NULL;
ALTER TABLE md_other_objects ALTER COLUMN CREATED_ON SET NOT NULL;


CREATE TABLE md_packages (
	id bigint NOT NULL,
	schema_id_fk bigint NOT NULL,
	name varchar(4000) NOT NULL,
	package_header text,
	native_sql text,
	native_key varchar(4000),
	language varchar(40) NOT NULL,
	comments varchar(4000),
	security_group_id bigint NOT NULL DEFAULT 0,
	created_on timestamp NOT NULL DEFAULT statement_timestamp(),
	created_by varchar(255),
	last_updated_on timestamp,
	last_updated_by varchar(255)
) ;
COMMENT ON TABLE md_packages IS E'For storing packages';
COMMENT ON COLUMN md_packages.id IS E'Primary Key';
COMMENT ON COLUMN md_packages.language IS E'//PUBLIC';
COMMENT ON COLUMN md_packages.name IS E'Name of this package //OBJECTNAME';
COMMENT ON COLUMN md_packages.native_key IS E'A unique identifer for this object at source.';
COMMENT ON COLUMN md_packages.native_sql IS E'The SQL used to create this package at source';
COMMENT ON COLUMN md_packages.schema_id_fk IS E'the schema in which this package resides //PARENTFIELD';
ALTER  TABLE md_packages OWNER TO scd_testuser;
ALTER TABLE md_packages ADD PRIMARY KEY (id);
ALTER TABLE md_packages ALTER COLUMN ID SET NOT NULL;
ALTER TABLE md_packages ALTER COLUMN SCHEMA_ID_FK SET NOT NULL;
ALTER TABLE md_packages ALTER COLUMN NAME SET NOT NULL;
ALTER TABLE md_packages ALTER COLUMN LANGUAGE SET NOT NULL;
ALTER TABLE md_packages ALTER COLUMN SECURITY_GROUP_ID SET NOT NULL;
ALTER TABLE md_packages ALTER COLUMN CREATED_ON SET NOT NULL;


CREATE TABLE md_partitions (
	id bigint NOT NULL,
	table_id_fk bigint NOT NULL,
	native_sql text,
	partition_expression varchar(4000),
	comments varchar(4000),
	security_group_id bigint NOT NULL DEFAULT 0,
	created_by varchar(255),
	created_on timestamp NOT NULL DEFAULT statement_timestamp(),
	last_updated_by varchar(255),
	last_updated_on timestamp
) ;
COMMENT ON TABLE md_partitions IS E'Partition information is stored in this table.';
COMMENT ON COLUMN md_partitions.id IS E'Primary Key';
COMMENT ON COLUMN md_partitions.native_sql IS E'The SQL used to create this partition at source';
COMMENT ON COLUMN md_partitions.partition_expression IS E'The partition expression';
COMMENT ON COLUMN md_partitions.table_id_fk IS E'The table that this partition refers to //PARENTFIELD';
ALTER  TABLE md_partitions OWNER TO scd_testuser;
ALTER TABLE md_partitions ADD PRIMARY KEY (id);
ALTER TABLE md_partitions ALTER COLUMN ID SET NOT NULL;
ALTER TABLE md_partitions ALTER COLUMN TABLE_ID_FK SET NOT NULL;
ALTER TABLE md_partitions ALTER COLUMN SECURITY_GROUP_ID SET NOT NULL;
ALTER TABLE md_partitions ALTER COLUMN CREATED_ON SET NOT NULL;


CREATE TABLE md_privileges (
	id bigint NOT NULL,
	schema_id_fk bigint NOT NULL,
	privilege_name varchar(4000) NOT NULL,
	privelege_object_id bigint,
	privelegeobjecttype varchar(4000) NOT NULL,
	privelege_type varchar(4000) NOT NULL,
	admin_option char(1),
	native_sql text NOT NULL,
	native_key varchar(4000),
	comments varchar(4000),
	security_group_id bigint NOT NULL DEFAULT 0,
	created_on timestamp NOT NULL DEFAULT statement_timestamp(),
	created_by varchar(255),
	last_updated_on timestamp,
	last_updated_by varchar(255)
) ;
COMMENT ON TABLE md_privileges IS E'This table stores privilege information';
COMMENT ON COLUMN md_privileges.admin_option IS E'Flag to show if this was granted with admin option.  ''Y'' means it was granted with admin option ''N'' means it was NOT granted with admin option.  NULL means not applicable (e.g. not known, not supported by source platform, etc.)';
COMMENT ON COLUMN md_privileges.id IS E'Primary Key';
COMMENT ON COLUMN md_privileges.native_key IS E'An identifier for this object at source.';
COMMENT ON COLUMN md_privileges.native_sql IS E'The SQL used to create this privilege at source';
COMMENT ON COLUMN md_privileges.privelege_object_id IS E'This references the table, view, etc on which the privelege exists.  This can be NULL for things like system wide privileges';
COMMENT ON COLUMN md_privileges.privelege_type IS E'e.g.select';
COMMENT ON COLUMN md_privileges.privelegeobjecttype IS E'The type the privelege is on (e.g. INDEX)';
COMMENT ON COLUMN md_privileges.privilege_name IS E'The name of the privilege //OBJECTNAME';
COMMENT ON COLUMN md_privileges.schema_id_fk IS E'The schema to which this object belongs //PARENTFIELD';
ALTER  TABLE md_privileges OWNER TO scd_testuser;
ALTER TABLE md_privileges ADD PRIMARY KEY (id);
ALTER TABLE md_privileges ALTER COLUMN ID SET NOT NULL;
ALTER TABLE md_privileges ALTER COLUMN SCHEMA_ID_FK SET NOT NULL;
ALTER TABLE md_privileges ALTER COLUMN PRIVILEGE_NAME SET NOT NULL;
ALTER TABLE md_privileges ALTER COLUMN PRIVELEGEOBJECTTYPE SET NOT NULL;
ALTER TABLE md_privileges ALTER COLUMN PRIVELEGE_TYPE SET NOT NULL;
ALTER TABLE md_privileges ALTER COLUMN NATIVE_SQL SET NOT NULL;
ALTER TABLE md_privileges ALTER COLUMN SECURITY_GROUP_ID SET NOT NULL;
ALTER TABLE md_privileges ALTER COLUMN CREATED_ON SET NOT NULL;


CREATE TABLE md_projects (
	id bigint NOT NULL,
	project_name varchar(4000) NOT NULL,
	comments varchar(4000),
	security_group_id bigint NOT NULL DEFAULT 0,
	created_on timestamp NOT NULL DEFAULT statement_timestamp(),
	created_by varchar(255),
	last_updated_on timestamp,
	last_updated_by varchar(255)
) ;
COMMENT ON TABLE md_projects IS E'This is a top level container for a set of connections.';
COMMENT ON COLUMN md_projects.id IS E'Primary key';
COMMENT ON COLUMN md_projects.project_name IS E'Name of the project //OBJECTNAME';
ALTER  TABLE md_projects OWNER TO scd_testuser;
ALTER TABLE md_projects ADD PRIMARY KEY (id);
ALTER TABLE md_projects ALTER COLUMN ID SET NOT NULL;
ALTER TABLE md_projects ALTER COLUMN PROJECT_NAME SET NOT NULL;
ALTER TABLE md_projects ALTER COLUMN SECURITY_GROUP_ID SET NOT NULL;
ALTER TABLE md_projects ALTER COLUMN CREATED_ON SET NOT NULL;


CREATE TABLE md_registry (
	object_type varchar(30) NOT NULL,
	object_name varchar(30) NOT NULL,
	desc_object_name varchar(30)
) ;
COMMENT ON TABLE md_registry IS E'Table to store information on the MD_ repository.  This lists the objects to be dropped if you wish to remove the repository';
ALTER  TABLE md_registry OWNER TO scd_testuser;
ALTER TABLE md_registry ADD PRIMARY KEY (object_type,object_name);
ALTER TABLE md_registry ALTER COLUMN OBJECT_TYPE SET NOT NULL;
ALTER TABLE md_registry ALTER COLUMN OBJECT_NAME SET NOT NULL;


CREATE TABLE md_repoversions (
	revision bigint NOT NULL
) ;
COMMENT ON TABLE md_repoversions IS E'This table is used to version this schema for future requirements.';
ALTER  TABLE md_repoversions OWNER TO scd_testuser;
ALTER TABLE md_repoversions ALTER COLUMN REVISION SET NOT NULL;


CREATE TABLE md_schemas (
	id bigint NOT NULL,
	catalog_id_fk bigint NOT NULL,
	name varchar(4000),
	type char(1),
	character_set varchar(4000),
	version_tag varchar(40),
	native_sql text,
	native_key varchar(4000),
	comments varchar(4000),
	security_group_id bigint NOT NULL DEFAULT 0,
	created_on timestamp NOT NULL DEFAULT statement_timestamp(),
	created_by varchar(255),
	last_updated_on timestamp,
	last_updated_by varchar(255)
) ;
COMMENT ON TABLE md_schemas IS E'This is the holder for schemas';
COMMENT ON COLUMN md_schemas.catalog_id_fk IS E'Catalog to which this schema blongs //PARENTFIELD';
COMMENT ON COLUMN md_schemas.character_set IS E'The characterset of this schema';
COMMENT ON COLUMN md_schemas.id IS E'Primary Key';
COMMENT ON COLUMN md_schemas.name IS E'Name of the schema //OBJECTNAME';
COMMENT ON COLUMN md_schemas.native_key IS E'A unique identifier that this schema is known as in its source state.';
COMMENT ON COLUMN md_schemas.native_sql IS E'The native SQL used to create this schema';
COMMENT ON COLUMN md_schemas.type IS E'Type of this schema.  Eaxamples are ''CAPTURED'' OR ''CONVERTED''';
COMMENT ON COLUMN md_schemas.version_tag IS E'A version string that can be used for tagging/baseling a schema';
ALTER  TABLE md_schemas OWNER TO scd_testuser;
ALTER TABLE md_schemas ADD PRIMARY KEY (id);
ALTER TABLE md_schemas ALTER COLUMN ID SET NOT NULL;
ALTER TABLE md_schemas ALTER COLUMN CATALOG_ID_FK SET NOT NULL;
ALTER TABLE md_schemas ALTER COLUMN SECURITY_GROUP_ID SET NOT NULL;
ALTER TABLE md_schemas ALTER COLUMN CREATED_ON SET NOT NULL;


CREATE TABLE md_sequences (
	id bigint NOT NULL,
	schema_id_fk bigint NOT NULL,
	name varchar(4000) NOT NULL,
	seq_start bigint NOT NULL,
	incr bigint NOT NULL DEFAULT 1,
	native_sql text,
	native_key varchar(4000),
	comments varchar(4000),
	security_group_id bigint NOT NULL DEFAULT 0,
	created_on timestamp NOT NULL DEFAULT statement_timestamp(),
	created_by varchar(255) NOT NULL DEFAULT '0',
	last_updated_on timestamp,
	last_updated_by varchar(255)
) ;
COMMENT ON TABLE md_sequences IS E'For storing information on sequences.';
COMMENT ON COLUMN md_sequences.id IS E'Primary Key';
COMMENT ON COLUMN md_sequences.incr IS E'Increment value of the sequence';
COMMENT ON COLUMN md_sequences.name IS E'Name of this sequence //OBJECTNAME';
COMMENT ON COLUMN md_sequences.native_key IS E'Identifier for this object at source.';
COMMENT ON COLUMN md_sequences.native_sql IS E'SQL used to create this object at source';
COMMENT ON COLUMN md_sequences.schema_id_fk IS E'The schema to which this object belongs. //PARENTFIELD';
COMMENT ON COLUMN md_sequences.seq_start IS E'Starting point of the sequence';
ALTER  TABLE md_sequences OWNER TO scd_testuser;
ALTER TABLE md_sequences ADD PRIMARY KEY (id);
ALTER TABLE md_sequences ALTER COLUMN ID SET NOT NULL;
ALTER TABLE md_sequences ALTER COLUMN SCHEMA_ID_FK SET NOT NULL;
ALTER TABLE md_sequences ALTER COLUMN NAME SET NOT NULL;
ALTER TABLE md_sequences ALTER COLUMN SEQ_START SET NOT NULL;
ALTER TABLE md_sequences ALTER COLUMN INCR SET NOT NULL;
ALTER TABLE md_sequences ALTER COLUMN SECURITY_GROUP_ID SET NOT NULL;
ALTER TABLE md_sequences ALTER COLUMN CREATED_ON SET NOT NULL;
ALTER TABLE md_sequences ALTER COLUMN CREATED_BY SET NOT NULL;


CREATE TABLE md_stored_programs (
	id bigint NOT NULL,
	schema_id_fk bigint NOT NULL,
	programtype varchar(20),
	name varchar(4000),
	package_id_fk bigint,
	native_sql text,
	native_key varchar(4000),
	language varchar(40) NOT NULL,
	comments varchar(4000),
	linecount bigint,
	security_group_id bigint NOT NULL DEFAULT 0,
	created_on timestamp NOT NULL DEFAULT statement_timestamp(),
	created_by varchar(255),
	last_updated_on timestamp,
	last_updated_by varchar(255)
) ;
COMMENT ON TABLE md_stored_programs IS E'Container for stored programs.';
COMMENT ON COLUMN md_stored_programs.id IS E'Primary Key';
COMMENT ON COLUMN md_stored_programs.language IS E'//PUBLIC';
COMMENT ON COLUMN md_stored_programs.name IS E'Name of the stored program //OBJECTNAME';
COMMENT ON COLUMN md_stored_programs.native_key IS E'A unique indetifier for this object at source';
COMMENT ON COLUMN md_stored_programs.native_sql IS E'The SQL used to create this object at source';
COMMENT ON COLUMN md_stored_programs.package_id_fk IS E'The package to which this object belongs';
COMMENT ON COLUMN md_stored_programs.programtype IS E'Java/TSQL/PLSQL, etc.';
COMMENT ON COLUMN md_stored_programs.schema_id_fk IS E'Schema to which this object belongs.  Note that the PACKAGE_ID_FK (if present also leads us to the relevant schema), however a stored program may or may not belong in a package.  If it is in a package, then the SCHEMA_ID_FK and the SCHEME_ID_FK in the parent package should match //PARENTFIELD';
ALTER  TABLE md_stored_programs OWNER TO scd_testuser;
ALTER TABLE md_stored_programs ADD PRIMARY KEY (id);
ALTER TABLE md_stored_programs ALTER COLUMN ID SET NOT NULL;
ALTER TABLE md_stored_programs ALTER COLUMN SCHEMA_ID_FK SET NOT NULL;
ALTER TABLE md_stored_programs ALTER COLUMN LANGUAGE SET NOT NULL;
ALTER TABLE md_stored_programs ALTER COLUMN SECURITY_GROUP_ID SET NOT NULL;
ALTER TABLE md_stored_programs ALTER COLUMN CREATED_ON SET NOT NULL;


CREATE TABLE md_synonyms (
	id bigint NOT NULL,
	schema_id_fk bigint NOT NULL,
	name varchar(4000) NOT NULL,
	synonym_for_id bigint NOT NULL,
	for_object_type varchar(4000) NOT NULL,
	private_visibility char(1),
	native_sql text,
	native_key varchar(4000),
	comments varchar(4000),
	security_group_id bigint NOT NULL DEFAULT 0,
	created_on timestamp NOT NULL DEFAULT statement_timestamp(),
	created_by varchar(255),
	last_updated_on timestamp,
	last_updated_by varchar(255)
) ;
COMMENT ON TABLE md_synonyms IS E'For storing synonym information.';
COMMENT ON COLUMN md_synonyms.for_object_type IS E'The type this is a synonym for (e.g. INDEX)';
COMMENT ON COLUMN md_synonyms.id IS E'Primary Key';
COMMENT ON COLUMN md_synonyms.name IS E'Synonym name //OBJECTNAME';
COMMENT ON COLUMN md_synonyms.native_key IS E'An identifier for this object at source.';
COMMENT ON COLUMN md_synonyms.native_sql IS E'The SQL used to create this object at source';
COMMENT ON COLUMN md_synonyms.private_visibility IS E'Visibility - Private or Public.  If Private_visibility = ''Y'' means this is a private synonym.  Anything else means it is a public synonym';
COMMENT ON COLUMN md_synonyms.schema_id_fk IS E'The schema to which this object belongs //PARENTFIELD';
COMMENT ON COLUMN md_synonyms.synonym_for_id IS E'What object this is a synonym for';
ALTER  TABLE md_synonyms OWNER TO scd_testuser;
ALTER TABLE md_synonyms ADD PRIMARY KEY (id);
ALTER TABLE md_synonyms ALTER COLUMN ID SET NOT NULL;
ALTER TABLE md_synonyms ALTER COLUMN SCHEMA_ID_FK SET NOT NULL;
ALTER TABLE md_synonyms ALTER COLUMN NAME SET NOT NULL;
ALTER TABLE md_synonyms ALTER COLUMN SYNONYM_FOR_ID SET NOT NULL;
ALTER TABLE md_synonyms ALTER COLUMN FOR_OBJECT_TYPE SET NOT NULL;
ALTER TABLE md_synonyms ALTER COLUMN SECURITY_GROUP_ID SET NOT NULL;
ALTER TABLE md_synonyms ALTER COLUMN CREATED_ON SET NOT NULL;


CREATE TABLE md_tables (
	id bigint NOT NULL,
	schema_id_fk bigint NOT NULL,
	table_name varchar(4000) NOT NULL,
	native_sql text,
	native_key varchar(4000),
	qualified_native_name varchar(4000) NOT NULL,
	comments varchar(4000),
	security_group_id bigint NOT NULL DEFAULT 0,
	created_on timestamp NOT NULL DEFAULT statement_timestamp(),
	created_by varchar(255),
	last_updated_on timestamp,
	last_updated_by varchar(255)
) ;
COMMENT ON TABLE md_tables IS E'Table used to store information about tables.';
COMMENT ON COLUMN md_tables.id IS E'Primary Key';
COMMENT ON COLUMN md_tables.native_key IS E'Unique identifier for this table at source';
COMMENT ON COLUMN md_tables.native_sql IS E'SQL Used to create this table at soruce';
COMMENT ON COLUMN md_tables.schema_id_fk IS E'Schema in which this table resides //PARENTFIELD';
COMMENT ON COLUMN md_tables.table_name IS E'Name of the table //OBJECTNAME';
ALTER  TABLE md_tables OWNER TO scd_testuser;
ALTER TABLE md_tables ADD PRIMARY KEY (id);
ALTER TABLE md_tables ALTER COLUMN ID SET NOT NULL;
ALTER TABLE md_tables ALTER COLUMN SCHEMA_ID_FK SET NOT NULL;
ALTER TABLE md_tables ALTER COLUMN TABLE_NAME SET NOT NULL;
ALTER TABLE md_tables ALTER COLUMN QUALIFIED_NATIVE_NAME SET NOT NULL;
ALTER TABLE md_tables ALTER COLUMN SECURITY_GROUP_ID SET NOT NULL;
ALTER TABLE md_tables ALTER COLUMN CREATED_ON SET NOT NULL;


CREATE TABLE md_tablespaces (
	id bigint NOT NULL,
	schema_id_fk bigint NOT NULL,
	tablespace_name varchar(4000),
	native_sql text,
	native_key varchar(4000),
	comments varchar(4000),
	security_group_id bigint NOT NULL DEFAULT 0,
	created_on timestamp NOT NULL DEFAULT statement_timestamp(),
	created_by varchar(255),
	last_updated_on timestamp,
	last_updated_by varchar(255)
) ;
COMMENT ON TABLE md_tablespaces IS E'For storing information about tablespaces.';
COMMENT ON COLUMN md_tablespaces.id IS E'Primary Key';
COMMENT ON COLUMN md_tablespaces.native_key IS E'A unique identifier for this object at source';
COMMENT ON COLUMN md_tablespaces.native_sql IS E'The SQL used to create this tablespace';
COMMENT ON COLUMN md_tablespaces.schema_id_fk IS E'Schema to which this tablespace belongs //PARENTFIELD';
COMMENT ON COLUMN md_tablespaces.tablespace_name IS E'Name of the table space //OBJECTNAME';
ALTER  TABLE md_tablespaces OWNER TO scd_testuser;
ALTER TABLE md_tablespaces ADD PRIMARY KEY (id);
ALTER TABLE md_tablespaces ALTER COLUMN ID SET NOT NULL;
ALTER TABLE md_tablespaces ALTER COLUMN SCHEMA_ID_FK SET NOT NULL;
ALTER TABLE md_tablespaces ALTER COLUMN SECURITY_GROUP_ID SET NOT NULL;
ALTER TABLE md_tablespaces ALTER COLUMN CREATED_ON SET NOT NULL;


CREATE TABLE md_triggers (
	id bigint NOT NULL,
	table_or_view_id_fk bigint NOT NULL,
	trigger_on_flag char(1) NOT NULL,
	trigger_name varchar(4000),
	trigger_timing varchar(4000),
	trigger_operation varchar(4000),
	trigger_event varchar(4000),
	native_sql text,
	native_key varchar(4000),
	language varchar(40) NOT NULL,
	comments varchar(4000),
	linecount bigint,
	security_group_id bigint NOT NULL DEFAULT 0,
	created_on timestamp NOT NULL DEFAULT statement_timestamp(),
	created_by varchar(255),
	last_updated_on timestamp,
	last_updated_by varchar(255)
) ;
COMMENT ON TABLE md_triggers IS E'For storing information about triggers.';
COMMENT ON COLUMN md_triggers.id IS E'Primary Key';
COMMENT ON COLUMN md_triggers.language IS E'//PUBLIC';
COMMENT ON COLUMN md_triggers.native_key IS E'UInique identifer for this object at source';
COMMENT ON COLUMN md_triggers.native_sql IS E'The full definition ';
COMMENT ON COLUMN md_triggers.table_or_view_id_fk IS E'Table on which this trigger fires';
COMMENT ON COLUMN md_triggers.trigger_event IS E'The actual trigger that gets fired ';
COMMENT ON COLUMN md_triggers.trigger_name IS E'Name of the trigger //OBJECTNAME';
COMMENT ON COLUMN md_triggers.trigger_on_flag IS E'Flag to show iif the trigger is on a table or a view.  If it is a table this should be ''T''. If it is on a view this should be ''V''';
COMMENT ON COLUMN md_triggers.trigger_operation IS E'insert, delete, etc.';
COMMENT ON COLUMN md_triggers.trigger_timing IS E'before, after ,etc.';
ALTER  TABLE md_triggers OWNER TO scd_testuser;
ALTER TABLE md_triggers ADD PRIMARY KEY (id);
ALTER TABLE md_triggers ALTER COLUMN ID SET NOT NULL;
ALTER TABLE md_triggers ALTER COLUMN TABLE_OR_VIEW_ID_FK SET NOT NULL;
ALTER TABLE md_triggers ALTER COLUMN TRIGGER_ON_FLAG SET NOT NULL;
ALTER TABLE md_triggers ALTER COLUMN LANGUAGE SET NOT NULL;
ALTER TABLE md_triggers ALTER COLUMN SECURITY_GROUP_ID SET NOT NULL;
ALTER TABLE md_triggers ALTER COLUMN CREATED_ON SET NOT NULL;


CREATE TABLE md_users (
	id bigint NOT NULL,
	schema_id_fk bigint NOT NULL,
	username varchar(4000) NOT NULL,
	password varchar(4000),
	native_sql text,
	native_key varchar(4000),
	comments varchar(4000),
	security_group_id bigint NOT NULL DEFAULT 0,
	created_on timestamp NOT NULL DEFAULT statement_timestamp(),
	created_by varchar(255),
	last_updated_on timestamp,
	last_updated_by varchar(255)
) ;
COMMENT ON TABLE md_users IS E'User information.';
COMMENT ON COLUMN md_users.id IS E'Primary Key';
COMMENT ON COLUMN md_users.native_key IS E'Unique identifier for this object at source.';
COMMENT ON COLUMN md_users.native_sql IS E'SQL Used to create this object at source';
COMMENT ON COLUMN md_users.password IS E'Password for login';
COMMENT ON COLUMN md_users.schema_id_fk IS E'Shema in which this object belongs //PARENTFIELD';
COMMENT ON COLUMN md_users.username IS E'Username for login //OBJECTNAME';
ALTER  TABLE md_users OWNER TO scd_testuser;
ALTER TABLE md_users ADD PRIMARY KEY (id);
ALTER TABLE md_users ALTER COLUMN ID SET NOT NULL;
ALTER TABLE md_users ALTER COLUMN SCHEMA_ID_FK SET NOT NULL;
ALTER TABLE md_users ALTER COLUMN USERNAME SET NOT NULL;
ALTER TABLE md_users ALTER COLUMN SECURITY_GROUP_ID SET NOT NULL;
ALTER TABLE md_users ALTER COLUMN CREATED_ON SET NOT NULL;


CREATE TABLE md_user_defined_data_types (
	id bigint NOT NULL,
	schema_id_fk bigint NOT NULL,
	data_type_name varchar(4000) NOT NULL,
	definition varchar(4000) NOT NULL,
	native_sql text NOT NULL,
	native_key varchar(4000),
	comments varchar(4000),
	security_group_id bigint NOT NULL DEFAULT 0,
	created_on timestamp NOT NULL DEFAULT statement_timestamp(),
	created_by varchar(255),
	last_updated_on timestamp,
	last_updated_by varchar(255)
) ;
COMMENT ON TABLE md_user_defined_data_types IS E'For storing information on user defined data types.';
COMMENT ON COLUMN md_user_defined_data_types.data_type_name IS E'The name of the data type //OBJECTNAME';
COMMENT ON COLUMN md_user_defined_data_types.definition IS E'The definition of the data type';
COMMENT ON COLUMN md_user_defined_data_types.id IS E'Primary Key';
COMMENT ON COLUMN md_user_defined_data_types.native_key IS E'An unique identifier for this object at source.';
COMMENT ON COLUMN md_user_defined_data_types.native_sql IS E'The native SQL used to create this object';
COMMENT ON COLUMN md_user_defined_data_types.schema_id_fk IS E'Schema to which this object blongs. //PARENTFIELD';
ALTER  TABLE md_user_defined_data_types OWNER TO scd_testuser;
ALTER TABLE md_user_defined_data_types ADD PRIMARY KEY (id);
ALTER TABLE md_user_defined_data_types ALTER COLUMN ID SET NOT NULL;
ALTER TABLE md_user_defined_data_types ALTER COLUMN SCHEMA_ID_FK SET NOT NULL;
ALTER TABLE md_user_defined_data_types ALTER COLUMN DATA_TYPE_NAME SET NOT NULL;
ALTER TABLE md_user_defined_data_types ALTER COLUMN DEFINITION SET NOT NULL;
ALTER TABLE md_user_defined_data_types ALTER COLUMN NATIVE_SQL SET NOT NULL;
ALTER TABLE md_user_defined_data_types ALTER COLUMN SECURITY_GROUP_ID SET NOT NULL;
ALTER TABLE md_user_defined_data_types ALTER COLUMN CREATED_ON SET NOT NULL;


CREATE TABLE md_user_privileges (
	id bigint NOT NULL,
	user_id_fk bigint NOT NULL,
	privilege_id_fk bigint,
	security_group_id bigint NOT NULL DEFAULT 0,
	created_on timestamp NOT NULL DEFAULT statement_timestamp(),
	created_by varchar(255),
	last_updated_on timestamp,
	last_udpated_by varchar(255)
) ;
COMMENT ON TABLE md_user_privileges IS E'This table stores privileges granted to individual users';
COMMENT ON COLUMN md_user_privileges.id IS E'Primary Key';
COMMENT ON COLUMN md_user_privileges.privilege_id_fk IS E'Privilege';
COMMENT ON COLUMN md_user_privileges.user_id_fk IS E'User';
ALTER  TABLE md_user_privileges OWNER TO scd_testuser;
ALTER TABLE md_user_privileges ADD PRIMARY KEY (id);
ALTER TABLE md_user_privileges ALTER COLUMN ID SET NOT NULL;
ALTER TABLE md_user_privileges ALTER COLUMN USER_ID_FK SET NOT NULL;
ALTER TABLE md_user_privileges ALTER COLUMN SECURITY_GROUP_ID SET NOT NULL;
ALTER TABLE md_user_privileges ALTER COLUMN CREATED_ON SET NOT NULL;


CREATE TABLE md_views (
	id bigint NOT NULL,
	schema_id_fk bigint NOT NULL,
	view_name varchar(4000),
	native_sql text,
	native_key varchar(4000),
	language varchar(40) NOT NULL,
	comments varchar(4000),
	linecount bigint,
	security_group_id bigint NOT NULL DEFAULT 0,
	created_on timestamp NOT NULL DEFAULT statement_timestamp(),
	created_by varchar(255),
	last_updated_on timestamp,
	last_updated_by varchar(255)
) ;
COMMENT ON TABLE md_views IS E'For storing information on views.';
COMMENT ON COLUMN md_views.id IS E'Primary Key';
COMMENT ON COLUMN md_views.language IS E'//PUBLIC';
COMMENT ON COLUMN md_views.native_key IS E'An identifier for this object at source.';
COMMENT ON COLUMN md_views.native_sql IS E'The SQL used to create this object at source';
COMMENT ON COLUMN md_views.schema_id_fk IS E'The schema to which this obect blongs. //PARENTFIELD';
COMMENT ON COLUMN md_views.view_name IS E'The name of the view //OBJECTNAME';
ALTER  TABLE md_views OWNER TO scd_testuser;
ALTER TABLE md_views ADD PRIMARY KEY (id);
ALTER TABLE md_views ALTER COLUMN ID SET NOT NULL;
ALTER TABLE md_views ALTER COLUMN SCHEMA_ID_FK SET NOT NULL;
ALTER TABLE md_views ALTER COLUMN LANGUAGE SET NOT NULL;
ALTER TABLE md_views ALTER COLUMN SECURITY_GROUP_ID SET NOT NULL;
ALTER TABLE md_views ALTER COLUMN CREATED_ON SET NOT NULL;


CREATE TABLE migrlog (
	id bigint NOT NULL,
	parent_log_id bigint,
	log_date timestamp NOT NULL,
	severity smallint NOT NULL,
	logtext varchar(4000),
	phase varchar(100),
	ref_object_id bigint,
	ref_object_type varchar(4000),
	connection_id_fk bigint
) ;
ALTER  TABLE migrlog OWNER TO scd_testuser;
ALTER TABLE migrlog ADD PRIMARY KEY (id);
ALTER TABLE migrlog ALTER COLUMN ID SET NOT NULL;
ALTER TABLE migrlog ALTER COLUMN LOG_DATE SET NOT NULL;
ALTER TABLE migrlog ALTER COLUMN SEVERITY SET NOT NULL;


CREATE TABLE migr_datatype_transform_map (
	id bigint NOT NULL,
	project_id_fk bigint NOT NULL,
	map_name varchar(4000),
	security_group_id bigint NOT NULL DEFAULT 0,
	created_on timestamp NOT NULL DEFAULT statement_timestamp(),
	created_by varchar(255),
	last_updated_on timestamp,
	last_updated_by varchar(255)
) ;
COMMENT ON TABLE migr_datatype_transform_map IS E'Table for storing data type maps.  A map is simply a collection of rules';
COMMENT ON COLUMN migr_datatype_transform_map.id IS E'Primary Key';
COMMENT ON COLUMN migr_datatype_transform_map.map_name IS E'A name for the map';
COMMENT ON COLUMN migr_datatype_transform_map.project_id_fk IS E'//PARENTFIELD';
ALTER  TABLE migr_datatype_transform_map OWNER TO scd_testuser;
ALTER TABLE migr_datatype_transform_map ADD PRIMARY KEY (id);
ALTER TABLE migr_datatype_transform_map ALTER COLUMN ID SET NOT NULL;
ALTER TABLE migr_datatype_transform_map ALTER COLUMN PROJECT_ID_FK SET NOT NULL;
ALTER TABLE migr_datatype_transform_map ALTER COLUMN SECURITY_GROUP_ID SET NOT NULL;
ALTER TABLE migr_datatype_transform_map ALTER COLUMN CREATED_ON SET NOT NULL;


CREATE TABLE migr_datatype_transform_rule (
	id bigint NOT NULL,
	map_id_fk bigint NOT NULL,
	source_data_type_name varchar(4000) NOT NULL,
	source_precision bigint,
	source_scale bigint,
	target_data_type_name varchar(4000) NOT NULL,
	target_precision bigint,
	target_scale bigint,
	security_group_id bigint NOT NULL DEFAULT 0,
	created_on timestamp NOT NULL DEFAULT statement_timestamp(),
	created_by varchar(255),
	last_updated_on timestamp,
	last_updated_by varchar(255)
) ;
COMMENT ON COLUMN migr_datatype_transform_rule.id IS E'Primary Key';
COMMENT ON COLUMN migr_datatype_transform_rule.map_id_fk IS E'The map to which this rule belongs //PARENTFIELD';
COMMENT ON COLUMN migr_datatype_transform_rule.source_data_type_name IS E'Source data type';
COMMENT ON COLUMN migr_datatype_transform_rule.source_precision IS E'Precison to match';
COMMENT ON COLUMN migr_datatype_transform_rule.source_scale IS E'scale to match';
COMMENT ON COLUMN migr_datatype_transform_rule.target_data_type_name IS E'data type name to transform to';
COMMENT ON COLUMN migr_datatype_transform_rule.target_precision IS E'precision to map to ';
COMMENT ON COLUMN migr_datatype_transform_rule.target_scale IS E'scale to map to';
ALTER  TABLE migr_datatype_transform_rule OWNER TO scd_testuser;
ALTER TABLE migr_datatype_transform_rule ADD PRIMARY KEY (id);
ALTER TABLE migr_datatype_transform_rule ALTER COLUMN ID SET NOT NULL;
ALTER TABLE migr_datatype_transform_rule ALTER COLUMN MAP_ID_FK SET NOT NULL;
ALTER TABLE migr_datatype_transform_rule ALTER COLUMN SOURCE_DATA_TYPE_NAME SET NOT NULL;
ALTER TABLE migr_datatype_transform_rule ALTER COLUMN TARGET_DATA_TYPE_NAME SET NOT NULL;
ALTER TABLE migr_datatype_transform_rule ALTER COLUMN SECURITY_GROUP_ID SET NOT NULL;
ALTER TABLE migr_datatype_transform_rule ALTER COLUMN CREATED_ON SET NOT NULL;


CREATE TABLE migr_generation_order (
	id bigint NOT NULL,
	connection_id_fk bigint NOT NULL,
	object_id bigint NOT NULL,
	object_type varchar(4000) NOT NULL,
	generation_order bigint NOT NULL
) ;
COMMENT ON COLUMN migr_generation_order.connection_id_fk IS E'//PARENTFIELD';
ALTER  TABLE migr_generation_order OWNER TO scd_testuser;
ALTER TABLE migr_generation_order ADD UNIQUE (object_id);
ALTER TABLE migr_generation_order ADD PRIMARY KEY (id);
ALTER TABLE migr_generation_order ALTER COLUMN ID SET NOT NULL;
ALTER TABLE migr_generation_order ALTER COLUMN CONNECTION_ID_FK SET NOT NULL;
ALTER TABLE migr_generation_order ALTER COLUMN OBJECT_ID SET NOT NULL;
ALTER TABLE migr_generation_order ALTER COLUMN OBJECT_TYPE SET NOT NULL;
ALTER TABLE migr_generation_order ALTER COLUMN GENERATION_ORDER SET NOT NULL;


CREATE TABLE periodischdaten (
	vertragsnummer bigint,
	geschaeftsjahr varchar(50),
	durchgefuehrt_am timestamp,
	durchgefuehrt_von varchar(50)
) ;
ALTER  TABLE periodischdaten OWNER TO scd_testuser;
CREATE UNIQUE INDEX ixperiodischdaten ON periodischdaten (vertragsnummer, geschaeftsjahr);
CREATE INDEX ixperiodischdatendurch_am ON periodischdaten (durchgefuehrt_am);
CREATE INDEX ixperiodischdatenv_nr ON periodischdaten (vertragsnummer);


CREATE TABLE protokoll (
	letzte_nutzung timestamp,
	benutzer char(8),
	methode varchar(32),
	verteiler_nummer integer,
	verteiler_name varchar(255),
	meldung varchar(255)
) ;
ALTER  TABLE protokoll OWNER TO scd_testuser;
CREATE UNIQUE INDEX ixprotokoll ON protokoll (letzte_nutzung, benutzer);


CREATE TABLE rahmendaten (
	vertragsnummer bigint,
	geschaeftsjahr varchar(50),
	aktion bigint,
	am timestamp,
	durch varchar(255),
	sub varchar(255),
	emp varchar(255),
	empt varchar(255),
	anl varchar(255),
	ori varchar(250),
	oricp varchar(255),
	att1 varchar(255),
	att2 varchar(255),
	att3 varchar(255),
	att4 varchar(255),
	preis bigint
) ;
ALTER  TABLE rahmendaten OWNER TO scd_testuser;
CREATE UNIQUE INDEX ixrahmendaten ON rahmendaten (vertragsnummer, geschaeftsjahr, aktion);
CREATE INDEX ixrahmendatenaktion ON rahmendaten (aktion);
CREATE INDEX ixrahmendatenv_nr ON rahmendaten (vertragsnummer);


CREATE TABLE rechte (
	verteiler_nummer integer,
	berechtigung char(1),
	berechtigter char(8)
) ;
ALTER  TABLE rechte OWNER TO scd_testuser;
CREATE UNIQUE INDEX ixrechte ON rechte (verteiler_nummer, berechtigung, berechtigter);


CREATE UNLOGGED TABLE scdx_1 (
	c char(2),
	o varchar(255),
	ou varchar(255),
	l varchar(255),
	cn varchar(255),
	sn varchar(255),
	givenname varchar(255),
	commonnamenational varchar(255),
	initials varchar(255),
	gender char(1),
	personaltitle varchar(255),
	graduatetitle varchar(255),
	mainfunction varchar(255),
	department varchar(255),
	building varchar(255),
	roomnumber varchar(255),
	"x400-address" varchar(255),
	mail varchar(255),
	telephonenumber varchar(255),
	faxnumber varchar(255),
	secretary varchar(255),
	gidsec char(8),
	gidsecflag char(1),
	representation varchar(255),
	gidrep char(8),
	gidrepflag char(1),
	mobile varchar(255),
	videoconferencenumber1 varchar(255),
	videoconferencenumber2 varchar(255),
	publickey varchar(255),
	pager varchar(255),
	costlocation varchar(255),
	personalidnumber varchar(255),
	securephone varchar(255),
	alternatephone varchar(255),
	personalfax varchar(255),
	faxnumbersec varchar(255),
	netmeeting varchar(255),
	scdid varchar(255),
	maident varchar(255),
	gid char(8),
	postofficebox varchar(255),
	costlocationunit varchar(255),
	surnamenational varchar(255),
	givennamenational varchar(255),
	departmenttext varchar(255),
	releaseextern varchar(255),
	personalremark varchar(255),
	labeleduri varchar(255),
	expiredate varchar(255),
	validdate varchar(255),
	leavedate varchar(255),
	joindate varchar(255),
	modifytimestamp varchar(255),
	salid varchar(255),
	recordtype varchar(255),
	recordtypev3 varchar(255),
	konzbet integer,
	utc varchar(255),
	firmstat varchar(255),
	usertype varchar(255),
	contractstatus varchar(255),
	status varchar(255),
	sponsor varchar(255),
	sponsorflag char(1),
	snampre varchar(255),
	snamadd varchar(255),
	lastname varchar(255),
	appkey varchar(255),
	scdversion varchar(255),
	pkiversion varchar(255),
	robinson varchar(255),
	createtimestamp varchar(255),
	ende char(1),
	localityinternational varchar(255),
	localitynational varchar(255),
	deliveryid varchar(255),
	tcgid char(8),
	certindicator varchar(255),
	x509 smallint,
	pgp smallint,
	kaw smallint,
	kraw smallint,
	kueraw smallint,
	kvs smallint,
	krvs smallint,
	kruevs smallint,
	kpost smallint,
	orgid varchar(255),
	orgidflag char(1),
	nickname varchar(255),
	displayname varchar(255),
	departmentnumber varchar(255),
	unitid varchar(255),
	unit varchar(255),
	gidman1 char(8),
	gidman1flag char(1),
	gidman2 char(8),
	gidman2flag char(1),
	gidmanf1 char(8),
	gidmanf2 char(8),
	gidmanf3 char(8),
	departmenttextnational varchar(255),
	delegation varchar(255),
	itacc char(1),
	reqacc char(1),
	reqmail char(1),
	reqmbox char(1),
	reststart varchar(255),
	restend varchar(255),
	vip char(1),
	companycode varchar(255),
	mgmtresp varchar(255),
	notwebvisible char(2),
	gpcompany varchar(255),
	mgmtlevel char(1),
	lifecycleevent varchar(255),
	lifecycledate varchar(255),
	mailpriv varchar(255),
	mobilepriv varchar(255),
	wcunit varchar(255),
	actiontype char(2),
	actionreason char(2),
	actionstartdate varchar(255),
	preferredsn varchar(255),
	orglevela varchar(255),
	orglevelb varchar(255),
	orglevelc varchar(255),
	orgleveld varchar(255),
	orglevelx varchar(255),
	altou varchar(255),
	clientid smallint,
	clientname varchar(255),
	fksource varchar(255),
	prefpronoun varchar(255),
	countryofresidence char(2),
	validationerror varchar(255)
) ;
ALTER  TABLE scdx_1 OWNER TO scd_testuser;

CREATE UNIQUE INDEX ixscdx_1_dn ON scdx_1 (c, o, ou, l, cn);



CREATE UNLOGGED TABLE scd_2 (
	c char(2),
	o varchar(255),
	ou varchar(255),
	l varchar(255),
	cn varchar(255),
	sn varchar(255),
	givenname varchar(255),
	commonnamenational varchar(255),
	initials varchar(255),
	gender char(1),
	personaltitle varchar(255),
	graduatetitle varchar(255),
	mainfunction varchar(255),
	department varchar(255),
	building varchar(255),
	roomnumber varchar(255),
	"x400-address" varchar(255),
	mail varchar(255),
	telephonenumber varchar(255),
	faxnumber varchar(255),
	secretary varchar(255),
	gidsec char(8),
	gidsecflag char(1),
	representation varchar(255),
	gidrep char(8),
	gidrepflag char(1),
	mobile varchar(255),
	videoconferencenumber1 varchar(255),
	videoconferencenumber2 varchar(255),
	publickey varchar(255),
	pager varchar(255),
	costlocation varchar(255),
	personalidnumber varchar(255),
	securephone varchar(255),
	alternatephone varchar(255),
	personalfax varchar(255),
	faxnumbersec varchar(255),
	netmeeting varchar(255),
	scdid varchar(255),
	maident varchar(255),
	gid char(8),
	postofficebox varchar(255),
	costlocationunit varchar(255),
	surnamenational varchar(255),
	givennamenational varchar(255),
	departmenttext varchar(255),
	releaseextern varchar(255),
	personalremark varchar(255),
	labeleduri varchar(255),
	expiredate varchar(255),
	validdate varchar(255),
	leavedate varchar(255),
	joindate varchar(255),
	modifytimestamp varchar(255),
	salid varchar(255),
	recordtype varchar(255),
	recordtypev3 varchar(255),
	konzbet integer,
	utc varchar(255),
	firmstat varchar(255),
	usertype varchar(255),
	contractstatus varchar(255),
	status varchar(255),
	sponsor varchar(255),
	sponsorflag char(1),
	snampre varchar(255),
	snamadd varchar(255),
	lastname varchar(255),
	appkey varchar(255),
	scdversion varchar(255),
	pkiversion varchar(255),
	robinson varchar(255),
	createtimestamp varchar(255),
	ende char(1),
	localityinternational varchar(255),
	localitynational varchar(255),
	deliveryid varchar(255),
	tcgid char(8),
	certindicator varchar(255),
	x509 smallint,
	pgp smallint,
	kaw smallint,
	kraw smallint,
	kueraw smallint,
	kvs smallint,
	krvs smallint,
	kruevs smallint,
	kpost smallint,
	orgid varchar(255),
	orgidflag char(1),
	nickname varchar(255),
	displayname varchar(255),
	departmentnumber varchar(255),
	unitid varchar(255),
	unit varchar(255),
	gidman1 char(8),
	gidman1flag char(1),
	gidman2 char(8),
	gidman2flag char(1),
	gidmanf1 char(8),
	gidmanf2 char(8),
	gidmanf3 char(8),
	departmenttextnational varchar(255),
	delegation varchar(255),
	itacc char(1),
	reqacc char(1),
	reqmail char(1),
	reqmbox char(1),
	reststart varchar(255),
	restend varchar(255),
	vip char(1),
	companycode varchar(255),
	mgmtresp varchar(255),
	notwebvisible char(2),
	gpcompany varchar(255),
	mgmtlevel char(1),
	lifecycleevent varchar(255),
	lifecycledate varchar(255),
	mailpriv varchar(255),
	mobilepriv varchar(255),
	wcunit varchar(255),
	actiontype char(2),
	actionreason char(2),
	actionstartdate varchar(255),
	preferredsn varchar(255),
	orglevela varchar(255),
	orglevelb varchar(255),
	orglevelc varchar(255),
	orgleveld varchar(255),
	orglevelx varchar(255),
	altou varchar(255),
	clientid smallint,
	clientname varchar(255),
	fksource varchar(255),
	prefpronoun varchar(255),
	countryofresidence char(2),
	validationerror varchar(255)
) ;
ALTER  TABLE scd_2 OWNER TO scd_testuser;

CREATE UNIQUE INDEX ixscd_2_dn ON scd_2 (c, o, ou, l, cn);



CREATE TABLE scd_banner (
	contract_number integer,
	image bytea,
	language varchar(2)
) ;
ALTER  TABLE scd_banner OWNER TO scd_testuser;


CREATE TABLE sommerzeit (
	c char(2),
	o varchar(16),
	ou varchar(32),
	l varchar(32),
	utc varchar(9),
	beginnsz timestamp,
	endesz timestamp,
	sz char(1)
) ;
ALTER  TABLE sommerzeit OWNER TO scd_testuser;
CREATE INDEX ixsommerzeit ON sommerzeit (c, o, ou, l);


CREATE TABLE stage_migrlog (
	svrid_fk bigint,
	dbid_gen_fk bigint,
	id bigint NOT NULL,
	ref_object_id bigint,
	ref_object_type varchar(4000),
	log_date timestamp NOT NULL,
	severity smallint NOT NULL,
	logtext varchar(4000),
	phase varchar(20)
) ;
ALTER  TABLE stage_migrlog OWNER TO scd_testuser;
ALTER TABLE stage_migrlog ADD PRIMARY KEY (id);
ALTER TABLE stage_migrlog ALTER COLUMN ID SET NOT NULL;
ALTER TABLE stage_migrlog ALTER COLUMN LOG_DATE SET NOT NULL;
ALTER TABLE stage_migrlog ALTER COLUMN SEVERITY SET NOT NULL;


CREATE TABLE tippderwoche (
	nr bigint NOT NULL,
	url_de varchar(255),
	url_en varchar(255),
	tipptextde varchar(255),
	tipptexten varchar(255),
	tippheadlinede varchar(255),
	tippheadlineen varchar(255),
	aktiv bigint,
	aktiv_ab timestamp,
	sgre_aktiv bigint,
	sgre_aktiv_ab timestamp,
	se_aktiv bigint,
	se_aktiv_ab timestamp,
	fl_aktiv bigint,
	fl_aktiv_ab timestamp
) ;
ALTER  TABLE tippderwoche OWNER TO scd_testuser;
CREATE UNIQUE INDEX ixtippderwoche ON tippderwoche (nr);
ALTER TABLE tippderwoche ALTER COLUMN NR SET NOT NULL;


CREATE TABLE tippderwoche_bak (
	nr bigint NOT NULL,
	url_de varchar(255),
	url_en varchar(255),
	tipptextde varchar(255),
	tipptexten varchar(255),
	tippheadlinede varchar(255),
	tippheadlineen varchar(255),
	aktiv bigint,
	aktiv_ab timestamp
) ;
ALTER  TABLE tippderwoche_bak OWNER TO scd_testuser;
ALTER TABLE tippderwoche_bak ALTER COLUMN NR SET NOT NULL;


CREATE TABLE ts_daten (
	vertragsnummer bigint NOT NULL,
	thema varchar(100),
	sprache varchar(100),
	kommentar varchar(255),
	central_translation varchar(2),
	local_translation varchar(2),
	aud_ws varchar(2),
	aud varchar(2),
	ut_ws varchar(2),
	ut varchar(2)
) ;
ALTER  TABLE ts_daten OWNER TO scd_testuser;
CREATE UNIQUE INDEX ixts_daten ON ts_daten (vertragsnummer);
ALTER TABLE ts_daten ALTER COLUMN VERTRAGSNUMMER SET NOT NULL;


CREATE TABLE users (
	gid char(8)
) ;
ALTER  TABLE users OWNER TO scd_testuser;
CREATE UNIQUE INDEX ixusers ON users (gid);


CREATE TABLE validorgcodes (
	bereich varchar(64),
	ou varchar(64),
	ou_gruppe varchar(64),
	ou_anzeige_de varchar(64),
	ou_anzeige_en varchar(64),
	sonstige varchar(64),
	sort bigint
) ;
ALTER  TABLE validorgcodes OWNER TO scd_testuser;


CREATE TABLE verteiler (
	verteiler_nummer integer,
	verteiler_name varchar(255),
	vn_funktion varchar(32),
	vn_bereich varchar(32),
	vn_standort varchar(32),
	vn_firma varchar(32),
	vn_land char(2),
	beschreibung varchar(128),
	erstellungsdatum timestamp,
	ende_der_nutzung timestamp,
	eigentuemer char(8),
	eigentuemer_name varchar(32),
	eigentuemer_vorname varchar(32),
	stellvertreter char(8),
	stellvertreter_name varchar(32),
	stellvertreter_vorname varchar(32),
	letzte_aenderung timestamp,
	geaendert_von char(8),
	letzte_nutzung timestamp,
	verteiler_inhalt varchar(16),
	vn_kurz varchar(32),
	vn_frei varchar(128)
) ;
ALTER  TABLE verteiler OWNER TO scd_testuser;
CREATE UNIQUE INDEX ixverteiler ON verteiler (verteiler_nummer);


CREATE TABLE vertraege (
	vertragsart char(2),
	vertragsnummer bigint,
	geschaeftsjahr varchar(50),
	anlagedatum timestamp,
	aenderungsdatum timestamp,
	erstellt_von varchar(50),
	geaendert_von varchar(50),
	durchgefuehrt_am timestamp,
	durchgefuehrt_von varchar(50),
	status varchar(50),
	status_durch varchar(50),
	status_am timestamp,
	freigabe bigint,
	freigabe_durch varchar(50),
	freigabe_am timestamp,
	cancel_durch varchar(50),
	cancel_am timestamp,
	firma varchar(50),
	abteilung varchar(50),
	plz varchar(50),
	ort varchar(50),
	strasse varchar(50),
	asp_name_k varchar(50),
	asp_vorname_k varchar(50),
	asp_gid_k varchar(8),
	asp_mail_k varchar(75),
	asp_l_k varchar(50),
	asp_tel_k varchar(50),
	asp_abt_k varchar(50),
	asp_name_l varchar(50),
	asp_vorname_l varchar(50),
	asp_gid_l varchar(8),
	asp_mail_l varchar(75),
	asp_l_l varchar(50),
	asp_tel_l varchar(50),
	asp_abt_l varchar(50),
	asp_name_k_kaufm varchar(50),
	asp_vorname_k_kaufm varchar(50),
	asp_gid_k_kaufm varchar(8),
	asp_mail_k_kaufm varchar(75),
	asp_l_k_kaufm varchar(50),
	asp_tel_k_kaufm varchar(50),
	asp_abt_k_kaufm varchar(50),
	asp_name_l_kaufm varchar(50),
	asp_vorname_l_kaufm varchar(50),
	asp_gid_l_kaufm varchar(8),
	asp_mail_l_kaufm varchar(75),
	asp_l_l_kaufm varchar(50),
	asp_tel_l_kaufm varchar(50),
	asp_abt_l_kaufm varchar(50),
	vertragsdatum timestamp,
	verwendungszweck_betreff varchar(250),
	umfang_selektion varchar(250),
	preis bigint,
	org_id varchar(50),
	bestellzeichen varchar(50),
	leistungsart varchar(50),
	kontrakt_nummer varchar(50),
	beginn_datum timestamp,
	ende_datum timestamp,
	lieferart varchar(50),
	gepackt bigint,
	asp_name varchar(50),
	asp_vorname varchar(50),
	asp_gid varchar(8),
	asp_mail varchar(75),
	asp_abt varchar(50),
	asp_tel varchar(50),
	asp_l varchar(50),
	emfpaengermail varchar(75),
	server varchar(50),
	benutzername varchar(50),
	kennwort varchar(50),
	verzeichnis varchar(50),
	zugangsberechtigung varchar(50),
	abfragename varchar(50),
	sql varchar(4000),
	anzahl_datensaetze bigint,
	anzahl_de bigint,
	dateiname varchar(50),
	dateityp varchar(50),
	exportspezifikation varchar(50),
	pfad varchar(255),
	ori varchar(250),
	oricp varchar(250),
	sub varchar(250),
	emp varchar(250),
	empt varchar(250),
	anl varchar(250),
	att1 varchar(250),
	att2 varchar(250),
	att3 varchar(250),
	att4 varchar(250),
	anwendungsnummer bigint,
	anwendung varchar(150),
	url varchar(250),
	url_e varchar(250),
	hotline_name varchar(150),
	hotline_vorname varchar(150),
	hotline_mail varchar(150),
	hotline_abt varchar(50),
	hotline_tel varchar(50),
	hotline_gid varchar(8),
	hotline_l varchar(150),
	bemerkung varchar(4000),
	zugriffszeitpunkt varchar(50),
	zugriffsdauer varchar(50),
	zugriffsfrequenz varchar(50),
	zugriffsart varchar(50),
	bildname varchar(250),
	logtext varchar(250),
	bildinfotext varchar(150),
	wb_sprache varchar(50),
	lieferzyklus varchar(50),
	mo bigint,
	di bigint,
	mi bigint,
	"do" bigint,
	fr bigint,
	sa bigint,
	so bigint,
	historygp varchar(4000),
	historyel varchar(4000),
	historye2 varchar(4000),
	tstart timestamp,
	tende timestamp,
	tbetreff varchar(255),
	ttext varchar(4000),
	tprio varchar(50),
	tort varchar(255),
	bildinfotexten varchar(150),
	rabatt bigint,
	positionsnummer varchar(6),
	grant_gov smallint,
	grant_gov_durch varchar(8),
	grant_gov_am timestamp,
	grant_ds smallint,
	grant_ds_durch varchar(8),
	grant_ds_am timestamp,
	internet_access smallint,
	ticket_nr varchar(50),
	local_account_dn varchar(250),
	ad_login varchar(250),
	grant_gov_name varchar(150),
	grant_gov_vorname varchar(150),
	grant_ds_name varchar(150),
	grant_ds_vorname varchar(150),
	grant_scd bigint,
	grant_scd_durch varchar(8),
	grant_scd_am timestamp,
	grant_scd_name varchar(150),
	grant_scd_vorname varchar(150),
	grant_scd_grund bigint,
	future_entries bigint,
	geschaeftszweck varchar(4000),
	selektion varchar(4000),
	filter_scope varchar(2000),
	facts_external_id varchar(40),
	lieferzyklus_bemerkung varchar(255),
	asp_clientid_k varchar(2),
	grant_siemens bigint,
	grant_energy bigint,
	grant_flender bigint,
	grant_carveout smallint
) ;
ALTER  TABLE vertraege OWNER TO scd_testuser;

CREATE UNIQUE INDEX ixvertraegev_nru ON vertraege (vertragsnummer);


CREATE TABLE vertraege_2022_01_26 (
	vertragsart char(2),
	vertragsnummer bigint,
	geschaeftsjahr varchar(50),
	anlagedatum timestamp,
	aenderungsdatum timestamp,
	erstellt_von varchar(50),
	geaendert_von varchar(50),
	durchgefuehrt_am timestamp,
	durchgefuehrt_von varchar(50),
	status varchar(50),
	status_durch varchar(50),
	status_am timestamp,
	freigabe bigint,
	freigabe_durch varchar(50),
	freigabe_am timestamp,
	cancel_durch varchar(50),
	cancel_am timestamp,
	firma varchar(50),
	abteilung varchar(50),
	plz varchar(50),
	ort varchar(50),
	strasse varchar(50),
	asp_name_k varchar(50),
	asp_vorname_k varchar(50),
	asp_gid_k varchar(8),
	asp_mail_k varchar(75),
	asp_l_k varchar(50),
	asp_tel_k varchar(50),
	asp_abt_k varchar(50),
	asp_name_l varchar(50),
	asp_vorname_l varchar(50),
	asp_gid_l varchar(8),
	asp_mail_l varchar(75),
	asp_l_l varchar(50),
	asp_tel_l varchar(50),
	asp_abt_l varchar(50),
	asp_name_k_kaufm varchar(50),
	asp_vorname_k_kaufm varchar(50),
	asp_gid_k_kaufm varchar(8),
	asp_mail_k_kaufm varchar(75),
	asp_l_k_kaufm varchar(50),
	asp_tel_k_kaufm varchar(50),
	asp_abt_k_kaufm varchar(50),
	asp_name_l_kaufm varchar(50),
	asp_vorname_l_kaufm varchar(50),
	asp_gid_l_kaufm varchar(8),
	asp_mail_l_kaufm varchar(75),
	asp_l_l_kaufm varchar(50),
	asp_tel_l_kaufm varchar(50),
	asp_abt_l_kaufm varchar(50),
	vertragsdatum timestamp,
	verwendungszweck_betreff varchar(250),
	umfang_selektion varchar(250),
	preis bigint,
	org_id varchar(50),
	bestellzeichen varchar(50),
	leistungsart varchar(50),
	kontrakt_nummer varchar(50),
	beginn_datum timestamp,
	ende_datum timestamp,
	lieferart varchar(50),
	gepackt bigint,
	asp_name varchar(50),
	asp_vorname varchar(50),
	asp_gid varchar(8),
	asp_mail varchar(75),
	asp_abt varchar(50),
	asp_tel varchar(50),
	asp_l varchar(50),
	emfpaengermail varchar(75),
	server varchar(50),
	benutzername varchar(50),
	kennwort varchar(50),
	verzeichnis varchar(50),
	zugangsberechtigung varchar(50),
	abfragename varchar(50),
	sql varchar(4000),
	anzahl_datensaetze bigint,
	anzahl_de bigint,
	dateiname varchar(50),
	dateityp varchar(50),
	exportspezifikation varchar(50),
	pfad varchar(255),
	ori varchar(250),
	oricp varchar(250),
	sub varchar(250),
	emp varchar(250),
	empt varchar(250),
	anl varchar(250),
	att1 varchar(250),
	att2 varchar(250),
	att3 varchar(250),
	att4 varchar(250),
	anwendungsnummer bigint,
	anwendung varchar(150),
	url varchar(250),
	url_e varchar(250),
	hotline_name varchar(150),
	hotline_vorname varchar(150),
	hotline_mail varchar(150),
	hotline_abt varchar(50),
	hotline_tel varchar(50),
	hotline_gid varchar(8),
	hotline_l varchar(150),
	bemerkung varchar(4000),
	zugriffszeitpunkt varchar(50),
	zugriffsdauer varchar(50),
	zugriffsfrequenz varchar(50),
	zugriffsart varchar(50),
	bildname varchar(250),
	logtext varchar(250),
	bildinfotext varchar(150),
	wb_sprache varchar(50),
	lieferzyklus varchar(50),
	mo bigint,
	di bigint,
	mi bigint,
	"do" bigint,
	fr bigint,
	sa bigint,
	so bigint,
	historygp varchar(4000),
	historyel varchar(4000),
	historye2 varchar(4000),
	tstart timestamp,
	tende timestamp,
	tbetreff varchar(255),
	ttext varchar(4000),
	tprio varchar(50),
	tort varchar(255),
	bildinfotexten varchar(150),
	rabatt bigint,
	positionsnummer varchar(6),
	grant_gov smallint,
	grant_gov_durch varchar(8),
	grant_gov_am timestamp,
	grant_ds smallint,
	grant_ds_durch varchar(8),
	grant_ds_am timestamp,
	internet_access smallint,
	ticket_nr varchar(50),
	local_account_dn varchar(250),
	ad_login varchar(250),
	grant_gov_name varchar(150),
	grant_gov_vorname varchar(150),
	grant_ds_name varchar(150),
	grant_ds_vorname varchar(150),
	grant_scd bigint,
	grant_scd_durch varchar(8),
	grant_scd_am timestamp,
	grant_scd_name varchar(150),
	grant_scd_vorname varchar(150),
	grant_scd_grund bigint,
	future_entries bigint,
	geschaeftszweck varchar(4000),
	selektion varchar(4000),
	filter_scope varchar(2000),
	facts_external_id varchar(40),
	lieferzyklus_bemerkung varchar(255),
	asp_clientid_k varchar(2),
	grant_siemens bigint,
	grant_energy bigint,
	grant_flender bigint
) ;
ALTER  TABLE vertraege_2022_01_26 OWNER TO scd_testuser;


CREATE TABLE vertraege_bak_20210630 (
	vertragsart char(2),
	vertragsnummer bigint,
	geschaeftsjahr varchar(50),
	anlagedatum timestamp,
	aenderungsdatum timestamp,
	erstellt_von varchar(50),
	geaendert_von varchar(50),
	durchgefuehrt_am timestamp,
	durchgefuehrt_von varchar(50),
	status varchar(50),
	status_durch varchar(50),
	status_am timestamp,
	freigabe bigint,
	freigabe_durch varchar(50),
	freigabe_am timestamp,
	cancel_durch varchar(50),
	cancel_am timestamp,
	firma varchar(50),
	abteilung varchar(50),
	plz varchar(50),
	ort varchar(50),
	strasse varchar(50),
	asp_name_k varchar(50),
	asp_vorname_k varchar(50),
	asp_gid_k varchar(8),
	asp_mail_k varchar(75),
	asp_l_k varchar(50),
	asp_tel_k varchar(50),
	asp_abt_k varchar(50),
	asp_name_l varchar(50),
	asp_vorname_l varchar(50),
	asp_gid_l varchar(8),
	asp_mail_l varchar(75),
	asp_l_l varchar(50),
	asp_tel_l varchar(50),
	asp_abt_l varchar(50),
	asp_name_k_kaufm varchar(50),
	asp_vorname_k_kaufm varchar(50),
	asp_gid_k_kaufm varchar(8),
	asp_mail_k_kaufm varchar(75),
	asp_l_k_kaufm varchar(50),
	asp_tel_k_kaufm varchar(50),
	asp_abt_k_kaufm varchar(50),
	asp_name_l_kaufm varchar(50),
	asp_vorname_l_kaufm varchar(50),
	asp_gid_l_kaufm varchar(8),
	asp_mail_l_kaufm varchar(75),
	asp_l_l_kaufm varchar(50),
	asp_tel_l_kaufm varchar(50),
	asp_abt_l_kaufm varchar(50),
	vertragsdatum timestamp,
	verwendungszweck_betreff varchar(250),
	umfang_selektion varchar(250),
	preis bigint,
	org_id varchar(50),
	bestellzeichen varchar(50),
	leistungsart varchar(50),
	kontrakt_nummer varchar(50),
	beginn_datum timestamp,
	ende_datum timestamp,
	lieferart varchar(50),
	gepackt bigint,
	asp_name varchar(50),
	asp_vorname varchar(50),
	asp_gid varchar(8),
	asp_mail varchar(75),
	asp_abt varchar(50),
	asp_tel varchar(50),
	asp_l varchar(50),
	emfpaengermail varchar(75),
	server varchar(50),
	benutzername varchar(50),
	kennwort varchar(50),
	verzeichnis varchar(50),
	zugangsberechtigung varchar(50),
	abfragename varchar(50),
	sql varchar(4000),
	anzahl_datensaetze bigint,
	anzahl_de bigint,
	dateiname varchar(50),
	dateityp varchar(50),
	exportspezifikation varchar(50),
	pfad varchar(255),
	ori varchar(250),
	oricp varchar(250),
	sub varchar(250),
	emp varchar(250),
	empt varchar(250),
	anl varchar(250),
	att1 varchar(250),
	att2 varchar(250),
	att3 varchar(250),
	att4 varchar(250),
	anwendungsnummer bigint,
	anwendung varchar(150),
	url varchar(250),
	url_e varchar(250),
	hotline_name varchar(150),
	hotline_vorname varchar(150),
	hotline_mail varchar(150),
	hotline_abt varchar(50),
	hotline_tel varchar(50),
	hotline_gid varchar(8),
	hotline_l varchar(150),
	bemerkung varchar(4000),
	zugriffszeitpunkt varchar(50),
	zugriffsdauer varchar(50),
	zugriffsfrequenz varchar(50),
	zugriffsart varchar(50),
	bildname varchar(250),
	logtext varchar(250),
	bildinfotext varchar(150),
	wb_sprache varchar(50),
	lieferzyklus varchar(50),
	mo bigint,
	di bigint,
	mi bigint,
	"do" bigint,
	fr bigint,
	sa bigint,
	so bigint,
	historygp varchar(4000),
	historyel varchar(4000),
	historye2 varchar(4000),
	tstart timestamp,
	tende timestamp,
	tbetreff varchar(255),
	ttext varchar(4000),
	tprio varchar(50),
	tort varchar(255),
	bildinfotexten varchar(150),
	rabatt bigint,
	positionsnummer varchar(6),
	grant_gov smallint,
	grant_gov_durch varchar(8),
	grant_gov_am timestamp,
	grant_ds smallint,
	grant_ds_durch varchar(8),
	grant_ds_am timestamp,
	internet_access smallint,
	ticket_nr varchar(50),
	local_account_dn varchar(250),
	ad_login varchar(250),
	grant_gov_name varchar(150),
	grant_gov_vorname varchar(150),
	grant_ds_name varchar(150),
	grant_ds_vorname varchar(150),
	grant_scd bigint,
	grant_scd_durch varchar(8),
	grant_scd_am timestamp,
	grant_scd_name varchar(150),
	grant_scd_vorname varchar(150),
	grant_scd_grund bigint,
	future_entries bigint,
	geschaeftszweck varchar(4000),
	selektion varchar(4000),
	filter_scope varchar(2000),
	facts_external_id varchar(40),
	lieferzyklus_bemerkung varchar(255),
	asp_clientid_k varchar(2),
	grant_siemens bigint,
	grant_energy bigint,
	grant_flender bigint
) ;
ALTER  TABLE vertraege_bak_20210630 OWNER TO scd_testuser;


CREATE TABLE vertragsarten (
	vertragsart varchar(50),
	vertragsart_text varchar(50),
	verrechnungstext varchar(50),
	verzeichnis varchar(50),
	leistungsart varchar(50)
) ;
ALTER  TABLE vertragsarten OWNER TO scd_testuser;


CREATE TABLE wb_log (
	tagvon timestamp NOT NULL,
	tagbis timestamp NOT NULL,
	anz bigint NOT NULL,
	sourceip varchar(50) NOT NULL,
	serverip varchar(50) NOT NULL,
	logtext varchar(20) NOT NULL
) ;
ALTER  TABLE wb_log OWNER TO scd_testuser;
ALTER TABLE wb_log ALTER COLUMN TAGVON SET NOT NULL;
ALTER TABLE wb_log ALTER COLUMN TAGBIS SET NOT NULL;
ALTER TABLE wb_log ALTER COLUMN ANZ SET NOT NULL;
ALTER TABLE wb_log ALTER COLUMN SOURCEIP SET NOT NULL;
ALTER TABLE wb_log ALTER COLUMN SERVERIP SET NOT NULL;
ALTER TABLE wb_log ALTER COLUMN LOGTEXT SET NOT NULL;


CREATE TABLE ws_admin_users (
	userid varchar(128) NOT NULL,
	comment varchar(256) NOT NULL,
	userrole varchar(128) NOT NULL
) ;
ALTER  TABLE ws_admin_users OWNER TO scd_testuser;
ALTER TABLE ws_admin_users ADD PRIMARY KEY (userid);
ALTER TABLE ws_admin_users ALTER COLUMN USERID SET NOT NULL;
ALTER TABLE ws_admin_users ALTER COLUMN COMMENT SET NOT NULL;
ALTER TABLE ws_admin_users ALTER COLUMN USERROLE SET NOT NULL;


CREATE TABLE ws_audit (
	id numeric(38) NOT NULL,
	entry_time timestamp NOT NULL,
	userid varchar(128) NOT NULL,
	applicationuserid varchar(128),
	remotehost varchar(32),
	operation varchar(256),
	record_count numeric(38),
	category varchar(32),
	duration numeric(38),
	internet_source smallint
) ;
ALTER  TABLE ws_audit OWNER TO scd_testuser;
CREATE INDEX ws_audit_category ON ws_audit (category);
CREATE INDEX ws_audit_time ON ws_audit (entry_time);
CREATE INDEX ws_audit_user ON ws_audit (userid);
ALTER TABLE ws_audit ADD PRIMARY KEY (id);
ALTER TABLE ws_audit ALTER COLUMN ID SET NOT NULL;
ALTER TABLE ws_audit ALTER COLUMN ENTRY_TIME SET NOT NULL;
ALTER TABLE ws_audit ALTER COLUMN USERID SET NOT NULL;


CREATE TABLE ws_certificates (
	provider varchar(64) NOT NULL,
	certificate bytea NOT NULL,
	type varchar(20) NOT NULL,
	password varchar(64) NOT NULL
) ;
ALTER  TABLE ws_certificates OWNER TO scd_testuser;
ALTER TABLE ws_certificates ADD PRIMARY KEY (provider);
ALTER TABLE ws_certificates ALTER COLUMN PROVIDER SET NOT NULL;
ALTER TABLE ws_certificates ALTER COLUMN CERTIFICATE SET NOT NULL;
ALTER TABLE ws_certificates ALTER COLUMN TYPE SET NOT NULL;
ALTER TABLE ws_certificates ALTER COLUMN PASSWORD SET NOT NULL;


CREATE TABLE ws_clients (
	partner_id varchar(128) NOT NULL,
	issuer varchar(128) NOT NULL,
	userid varchar(128) NOT NULL,
	certid varchar(12) NOT NULL,
	service varchar(20) NOT NULL DEFAULT 'SCDWS',
	internal smallint DEFAULT 0,
	expiration_date timestamp
) ;
ALTER  TABLE ws_clients OWNER TO scd_testuser;
ALTER TABLE ws_clients ADD PRIMARY KEY (partner_id,issuer,service);
ALTER TABLE ws_clients ALTER COLUMN PARTNER_ID SET NOT NULL;
ALTER TABLE ws_clients ALTER COLUMN ISSUER SET NOT NULL;
ALTER TABLE ws_clients ALTER COLUMN USERID SET NOT NULL;
ALTER TABLE ws_clients ALTER COLUMN CERTID SET NOT NULL;
ALTER TABLE ws_clients ALTER COLUMN SERVICE SET NOT NULL;


CREATE TABLE ws_clients_historic (
	partner_id varchar(128) NOT NULL,
	issuer varchar(128) NOT NULL,
	userid varchar(128) NOT NULL,
	certid varchar(12) NOT NULL
) ;
ALTER  TABLE ws_clients_historic OWNER TO scd_testuser;
ALTER TABLE ws_clients_historic ALTER COLUMN PARTNER_ID SET NOT NULL;
ALTER TABLE ws_clients_historic ALTER COLUMN ISSUER SET NOT NULL;
ALTER TABLE ws_clients_historic ALTER COLUMN USERID SET NOT NULL;
ALTER TABLE ws_clients_historic ALTER COLUMN CERTID SET NOT NULL;


CREATE TABLE ws_colgroup_column_ids (
	id numeric(38) NOT NULL,
	colgroupid numeric(38) NOT NULL,
	columnid numeric(38) NOT NULL
) ;
ALTER  TABLE ws_colgroup_column_ids OWNER TO scd_testuser;
CREATE INDEX ws_colgroup_column_ids_colid ON ws_colgroup_column_ids (columnid);
CREATE INDEX ws_colgroup_column_ids_groupid ON ws_colgroup_column_ids (colgroupid);
ALTER TABLE ws_colgroup_column_ids ADD PRIMARY KEY (id);
ALTER TABLE ws_colgroup_column_ids ALTER COLUMN ID SET NOT NULL;
ALTER TABLE ws_colgroup_column_ids ALTER COLUMN COLGROUPID SET NOT NULL;
ALTER TABLE ws_colgroup_column_ids ALTER COLUMN COLUMNID SET NOT NULL;


CREATE TABLE ws_column_groups (
	colgroupid numeric(38) NOT NULL,
	entity varchar(56) NOT NULL,
	colgroupname varchar(128) NOT NULL
) ;
ALTER  TABLE ws_column_groups OWNER TO scd_testuser;
CREATE INDEX ws_column_groups_entity ON ws_column_groups (entity);
CREATE INDEX ws_column_groups_name ON ws_column_groups (colgroupname);
ALTER TABLE ws_column_groups ADD PRIMARY KEY (colgroupid);
ALTER TABLE ws_column_groups ALTER COLUMN COLGROUPID SET NOT NULL;
ALTER TABLE ws_column_groups ALTER COLUMN ENTITY SET NOT NULL;
ALTER TABLE ws_column_groups ALTER COLUMN COLGROUPNAME SET NOT NULL;


CREATE TABLE ws_column_names (
	columnid numeric(38) NOT NULL,
	entity varchar(128) NOT NULL,
	columnname varchar(45) NOT NULL
) ;
ALTER  TABLE ws_column_names OWNER TO scd_testuser;
CREATE INDEX ws_column_names_entity ON ws_column_names (entity);
CREATE INDEX ws_column_names_name ON ws_column_names (columnname);
ALTER TABLE ws_column_names ADD PRIMARY KEY (columnid);
ALTER TABLE ws_column_names ALTER COLUMN COLUMNID SET NOT NULL;
ALTER TABLE ws_column_names ALTER COLUMN ENTITY SET NOT NULL;
ALTER TABLE ws_column_names ALTER COLUMN COLUMNNAME SET NOT NULL;


CREATE TABLE ws_config (
	name varchar(128) NOT NULL,
	value varchar(1024) NOT NULL
) ;
ALTER  TABLE ws_config OWNER TO scd_testuser;
ALTER TABLE ws_config ADD PRIMARY KEY (name);
ALTER TABLE ws_config ALTER COLUMN NAME SET NOT NULL;
ALTER TABLE ws_config ALTER COLUMN VALUE SET NOT NULL;


CREATE TABLE ws_contract_mail (
	userid varchar(128) NOT NULL,
	entry_time timestamp NOT NULL,
	reason varchar(40)
) ;
ALTER  TABLE ws_contract_mail OWNER TO scd_testuser;
CREATE INDEX ws_contract_mail_time ON ws_contract_mail (entry_time);
ALTER TABLE ws_contract_mail ADD PRIMARY KEY (userid);
ALTER TABLE ws_contract_mail ALTER COLUMN ENTRY_TIME SET NOT NULL;


CREATE TABLE ws_cumulated_audit (
	id numeric(38) NOT NULL,
	year_month varchar(16) NOT NULL,
	userid varchar(128) NOT NULL,
	record_count numeric(38)
) ;
ALTER  TABLE ws_cumulated_audit OWNER TO scd_testuser;
CREATE INDEX ws_cumulated_audit_userid ON ws_cumulated_audit (userid);
CREATE INDEX ws_cumulated_audit_yearmonth ON ws_cumulated_audit (year_month);
ALTER TABLE ws_cumulated_audit ADD UNIQUE (year_month,userid);
ALTER TABLE ws_cumulated_audit ADD PRIMARY KEY (id);
ALTER TABLE ws_cumulated_audit ALTER COLUMN ID SET NOT NULL;
ALTER TABLE ws_cumulated_audit ALTER COLUMN YEAR_MONTH SET NOT NULL;
ALTER TABLE ws_cumulated_audit ALTER COLUMN USERID SET NOT NULL;


CREATE TABLE ws_export_data (
	cfilename varchar(128) NOT NULL,
	creationdate timestamp,
	creationfinished numeric(38),
	data text,
	datatype varchar(32)
) ;
ALTER  TABLE ws_export_data OWNER TO scd_testuser;
ALTER TABLE ws_export_data ADD PRIMARY KEY (cfilename);


CREATE TABLE ws_myid_config (
	client_id varchar(64) NOT NULL,
	user_id varchar(8) NOT NULL,
	my_id_url varchar(200) NOT NULL
) ;
ALTER  TABLE ws_myid_config OWNER TO scd_testuser;
ALTER TABLE ws_myid_config ADD PRIMARY KEY (client_id);
ALTER TABLE ws_myid_config ALTER COLUMN CLIENT_ID SET NOT NULL;
ALTER TABLE ws_myid_config ALTER COLUMN USER_ID SET NOT NULL;
ALTER TABLE ws_myid_config ALTER COLUMN MY_ID_URL SET NOT NULL;


CREATE TABLE ws_quota_mail (
	user_key varchar(128) NOT NULL,
	entry_time timestamp NOT NULL
) ;
ALTER  TABLE ws_quota_mail OWNER TO scd_testuser;
CREATE INDEX ws_quota_mail_time ON ws_quota_mail (entry_time);
ALTER TABLE ws_quota_mail ADD PRIMARY KEY (user_key);
ALTER TABLE ws_quota_mail ALTER COLUMN ENTRY_TIME SET NOT NULL;


CREATE TABLE ws_usage_per_user (
	userid varchar(128) NOT NULL,
	current_month varchar(45) NOT NULL,
	results_current_month numeric(38) DEFAULT 0
) ;
ALTER  TABLE ws_usage_per_user OWNER TO scd_testuser;
CREATE INDEX ws_usage_per_user_month ON ws_usage_per_user (current_month);
ALTER TABLE ws_usage_per_user ADD PRIMARY KEY (userid);
ALTER TABLE ws_usage_per_user ALTER COLUMN USERID SET NOT NULL;
ALTER TABLE ws_usage_per_user ALTER COLUMN CURRENT_MONTH SET NOT NULL;


CREATE TABLE ws_userid_clientid (
	id bigint GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1 MAXVALUE 9223372036854775807 MINVALUE 1 NO CYCLE CACHE 20 ),
	userid varchar(12) NOT NULL,
	clientid varchar(2) NOT NULL
) ;
ALTER  TABLE ws_userid_clientid OWNER TO scd_testuser;
ALTER TABLE ws_userid_clientid ADD PRIMARY KEY (id);
ALTER TABLE ws_userid_clientid ALTER COLUMN ID SET NOT NULL;
ALTER TABLE ws_userid_clientid ALTER COLUMN USERID SET NOT NULL;
ALTER TABLE ws_userid_clientid ALTER COLUMN CLIENTID SET NOT NULL;


CREATE TABLE ws_user_colgroup_ids (
	id numeric(38) NOT NULL,
	userid varchar(128) NOT NULL,
	colgroupid numeric(38) NOT NULL,
	modified timestamp DEFAULT statement_timestamp()
) ;
ALTER  TABLE ws_user_colgroup_ids OWNER TO scd_testuser;
CREATE INDEX ws_user_colgroup_ids_colid ON ws_user_colgroup_ids (colgroupid);
CREATE INDEX ws_user_colgroup_ids_modified ON ws_user_colgroup_ids (modified);
CREATE INDEX ws_user_colgroup_ids_userid ON ws_user_colgroup_ids (userid);
ALTER TABLE ws_user_colgroup_ids ADD PRIMARY KEY (id);
ALTER TABLE ws_user_colgroup_ids ALTER COLUMN ID SET NOT NULL;
ALTER TABLE ws_user_colgroup_ids ALTER COLUMN USERID SET NOT NULL;
ALTER TABLE ws_user_colgroup_ids ALTER COLUMN COLGROUPID SET NOT NULL;


CREATE TABLE ws_user_service (
	user_id varchar(20) NOT NULL,
	service varchar(20) NOT NULL
) ;
ALTER  TABLE ws_user_service OWNER TO scd_testuser;
ALTER TABLE ws_user_service ADD UNIQUE (user_id,service);
ALTER TABLE ws_user_service ALTER COLUMN USER_ID SET NOT NULL;
ALTER TABLE ws_user_service ALTER COLUMN SERVICE SET NOT NULL;


CREATE TABLE ws_user_settings (
	userid varchar(128) NOT NULL,
	scd_comment varchar(256),
	allowed_results_per_month numeric(38) NOT NULL,
	additional_filter varchar(1024),
	max_result_count numeric(38) NOT NULL,
	isgroup numeric(38),
	blocksonviolation numeric(38),
	modified timestamp DEFAULT statement_timestamp(),
	expires timestamp,
	starts timestamp,
	blocksonexpiredate bigint NOT NULL DEFAULT 1,
	future_entries bigint NOT NULL DEFAULT 0,
	intranet_access smallint NOT NULL DEFAULT 1,
	internet_access smallint NOT NULL DEFAULT 1,
	paging_allowed smallint NOT NULL DEFAULT 0,
	varian_user smallint DEFAULT 0
) ;
ALTER  TABLE ws_user_settings OWNER TO scd_testuser;
ALTER TABLE ws_user_settings ADD PRIMARY KEY (userid);
ALTER TABLE ws_user_settings ALTER COLUMN INTRANET_ACCESS SET NOT NULL;
ALTER TABLE ws_user_settings ALTER COLUMN INTERNET_ACCESS SET NOT NULL;
ALTER TABLE ws_user_settings ALTER COLUMN PAGING_ALLOWED SET NOT NULL;
ALTER TABLE ws_user_settings ALTER COLUMN USERID SET NOT NULL;
ALTER TABLE ws_user_settings ALTER COLUMN ALLOWED_RESULTS_PER_MONTH SET NOT NULL;
ALTER TABLE ws_user_settings ALTER COLUMN MAX_RESULT_COUNT SET NOT NULL;
ALTER TABLE ws_user_settings ALTER COLUMN BLOCKSONEXPIREDATE SET NOT NULL;
ALTER TABLE ws_user_settings ALTER COLUMN FUTURE_ENTRIES SET NOT NULL;


CREATE TABLE wx_clients (
	partner_id varchar(128) NOT NULL,
	issuer varchar(128) NOT NULL,
	userid varchar(128) NOT NULL,
	certid varchar(12) NOT NULL,
	service varchar(20) NOT NULL,
	internal smallint NOT NULL DEFAULT 0,
	expiration_date timestamp
) ;
ALTER  TABLE wx_clients OWNER TO scd_testuser;
ALTER TABLE wx_clients ALTER COLUMN PARTNER_ID SET NOT NULL;
ALTER TABLE wx_clients ALTER COLUMN ISSUER SET NOT NULL;
ALTER TABLE wx_clients ALTER COLUMN USERID SET NOT NULL;
ALTER TABLE wx_clients ALTER COLUMN CERTID SET NOT NULL;
ALTER TABLE wx_clients ALTER COLUMN SERVICE SET NOT NULL;
ALTER TABLE wx_clients ALTER COLUMN INTERNAL SET NOT NULL;


CREATE TABLE wx_clients_bak (
	partner_id varchar(128) NOT NULL,
	issuer varchar(128) NOT NULL,
	userid varchar(128) NOT NULL,
	certid varchar(12) NOT NULL,
	service varchar(20) NOT NULL,
	internal smallint NOT NULL
) ;
ALTER  TABLE wx_clients_bak OWNER TO scd_testuser;
ALTER TABLE wx_clients_bak ALTER COLUMN PARTNER_ID SET NOT NULL;
ALTER TABLE wx_clients_bak ALTER COLUMN ISSUER SET NOT NULL;
ALTER TABLE wx_clients_bak ALTER COLUMN USERID SET NOT NULL;
ALTER TABLE wx_clients_bak ALTER COLUMN CERTID SET NOT NULL;
ALTER TABLE wx_clients_bak ALTER COLUMN SERVICE SET NOT NULL;
ALTER TABLE wx_clients_bak ALTER COLUMN INTERNAL SET NOT NULL;
ALTER TABLE app_config ADD CONSTRAINT fk_app_config_app_id FOREIGN KEY (app_id) REFERENCES app(app_id) ON DELETE NO ACTION NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE ap_delivery ADD CONSTRAINT fk_ap_delivery_ap_user FOREIGN KEY (user_id) REFERENCES ap_user(user_id) ON DELETE NO ACTION NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE ap_exporter ADD CONSTRAINT fk_ap_exporter_ap_scheduler FOREIGN KEY (scheduler_id) REFERENCES ap_scheduler(scheduler_id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;

ALTER TABLE ap_exporter ADD CONSTRAINT fk_ap_exporter_ap_user FOREIGN KEY (user_id) REFERENCES ap_user(user_id) ON DELETE NO ACTION NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE ap_exporter_log ADD CONSTRAINT fk_ap_exporter_log_ap_delivery FOREIGN KEY (delivery_id) REFERENCES ap_delivery(delivery_id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;

ALTER TABLE ap_exporter_log ADD CONSTRAINT fk_ap_exporter_log_ap_exporter FOREIGN KEY (exporter_id) REFERENCES ap_exporter(exporter_id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE ap_scheduler ADD CONSTRAINT fk_ap_scheduler_ap_delivery FOREIGN KEY (delivery_id) REFERENCES ap_delivery(delivery_id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;

ALTER TABLE ap_scheduler ADD CONSTRAINT fk_ap_scheduler_ap_user FOREIGN KEY (user_id) REFERENCES ap_user(user_id) ON DELETE NO ACTION NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE ap_supp_data ADD CONSTRAINT fk_ap_supp_data_delivery_id FOREIGN KEY (delivery_id) REFERENCES ap_delivery(delivery_id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE ap_supp_metadata ADD CONSTRAINT fk_ap_supp_mdata_delivery_id FOREIGN KEY (delivery_id) REFERENCES ap_delivery(delivery_id) ON DELETE NO ACTION NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE gc_case ADD CONSTRAINT fk_gc_case_run_data_id FOREIGN KEY (run_data_id) REFERENCES gc_run_data(run_data_id) ON DELETE NO ACTION NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE gc_country ADD CONSTRAINT fk_gc_country_lead_country_id FOREIGN KEY (lead_country_id) REFERENCES gc_country(country_id) ON DELETE NO ACTION NOT DEFERRABLE INITIALLY IMMEDIATE;

ALTER TABLE gc_country ADD CONSTRAINT fk_gc_country_user_id FOREIGN KEY (user_id) REFERENCES gc_user(user_id) ON DELETE NO ACTION NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE gc_email_template ADD CONSTRAINT fk_gc_email_template_user_id FOREIGN KEY (user_id) REFERENCES gc_user(user_id) ON DELETE NO ACTION NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE gc_escalation ADD CONSTRAINT fk_gc_escalation_email_tpl_id FOREIGN KEY (email_template_id) REFERENCES gc_email_template(template_id) ON DELETE NO ACTION NOT DEFERRABLE INITIALLY IMMEDIATE;

ALTER TABLE gc_escalation ADD CONSTRAINT fk_gc_escalation_user_id FOREIGN KEY (user_id) REFERENCES gc_user(user_id) ON DELETE NO ACTION NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE gc_escalation_cases ADD CONSTRAINT fk_gc_escalation_cases_case_id FOREIGN KEY (case_id) REFERENCES gc_case(case_id) ON DELETE NO ACTION NOT DEFERRABLE INITIALLY IMMEDIATE;

ALTER TABLE gc_escalation_cases ADD CONSTRAINT fk_gc_escalation_cases_esc_id FOREIGN KEY (escalation_id) REFERENCES gc_escalation(escalation_id) ON DELETE NO ACTION NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE gc_query ADD CONSTRAINT fk_gc_query_err_notif_tpl_id FOREIGN KEY (error_notif_template_id) REFERENCES gc_email_template(template_id) ON DELETE NO ACTION NOT DEFERRABLE INITIALLY IMMEDIATE;

ALTER TABLE gc_query ADD CONSTRAINT fk_gc_query_notif_tpl_id FOREIGN KEY (notification_template_id) REFERENCES gc_email_template(template_id) ON DELETE NO ACTION NOT DEFERRABLE INITIALLY IMMEDIATE;

ALTER TABLE gc_query ADD CONSTRAINT fk_gc_query_succ_notif_tpl_id FOREIGN KEY (success_notif_template_id) REFERENCES gc_email_template(template_id) ON DELETE NO ACTION NOT DEFERRABLE INITIALLY IMMEDIATE;

ALTER TABLE gc_query ADD CONSTRAINT fk_gc_query_user_id FOREIGN KEY (user_id) REFERENCES gc_user(user_id) ON DELETE NO ACTION NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE gc_run ADD CONSTRAINT fk_gc_run_query_id FOREIGN KEY (query_id) REFERENCES gc_query(query_id) ON DELETE NO ACTION NOT DEFERRABLE INITIALLY IMMEDIATE;

ALTER TABLE gc_run ADD CONSTRAINT fk_gc_run_started_by_user_id FOREIGN KEY (started_by_user_id) REFERENCES gc_user(user_id) ON DELETE NO ACTION NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE gc_run_data ADD CONSTRAINT fk_gc_run_data_run_id FOREIGN KEY (run_id) REFERENCES gc_run(run_id) ON DELETE NO ACTION NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE md_additional_properties ADD CONSTRAINT md_additional_properties__fk1 FOREIGN KEY (connection_id_fk) REFERENCES md_connections(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE md_applicationfiles ADD CONSTRAINT md_file_app_fk FOREIGN KEY (applications_id_fk) REFERENCES md_applications(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE md_applications ADD CONSTRAINT md_app_proj_fk FOREIGN KEY (project_id_fk) REFERENCES md_projects(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE md_catalogs ADD CONSTRAINT md_catalogs_md_connection_fk1 FOREIGN KEY (connection_id_fk) REFERENCES md_connections(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE md_columns ADD CONSTRAINT md_columns_md_tables_fk1 FOREIGN KEY (table_id_fk) REFERENCES md_tables(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE md_connections ADD CONSTRAINT md_connections_md_project_fk1 FOREIGN KEY (project_id_fk) REFERENCES md_projects(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE md_constraints ADD CONSTRAINT md_constraints_md_tables_fk1 FOREIGN KEY (table_id_fk) REFERENCES md_tables(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE md_constraint_details ADD CONSTRAINT md_constraint_details_md__fk1 FOREIGN KEY (constraint_id_fk) REFERENCES md_constraints(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;

ALTER TABLE md_constraint_details ADD CONSTRAINT md_constraint_details_md__fk2 FOREIGN KEY (column_id_fk) REFERENCES md_columns(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE md_derivatives ADD CONSTRAINT md_derivatives_md_connect_fk1 FOREIGN KEY (derived_connection_id_fk) REFERENCES md_connections(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE md_file_artifacts ADD CONSTRAINT md_artifact_file_fk FOREIGN KEY (applicationfiles_id) REFERENCES md_applicationfiles(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE md_groups ADD CONSTRAINT md_groups_md_schemas_fk1 FOREIGN KEY (schema_id_fk) REFERENCES md_schemas(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE md_group_members ADD CONSTRAINT md_groupmembers_md_groups_fk1 FOREIGN KEY (group_id_fk) REFERENCES md_groups(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;

ALTER TABLE md_group_members ADD CONSTRAINT md_groupmembers_md_groups_fk2 FOREIGN KEY (group_member_id_fk) REFERENCES md_groups(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;

ALTER TABLE md_group_members ADD CONSTRAINT md_groupmembers_md_users_fk1 FOREIGN KEY (user_id_fk) REFERENCES md_users(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE md_group_privileges ADD CONSTRAINT md_group_privileges_md_gr_fk1 FOREIGN KEY (group_id_fk) REFERENCES md_groups(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;

ALTER TABLE md_group_privileges ADD CONSTRAINT md_group_privileges_md_pr_fk1 FOREIGN KEY (privilege_id_fk) REFERENCES md_privileges(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE md_indexes ADD CONSTRAINT md_indexes_md_tables_fk1 FOREIGN KEY (table_id_fk) REFERENCES md_tables(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE md_index_details ADD CONSTRAINT md_index_details_md_colum_fk1 FOREIGN KEY (column_id_fk) REFERENCES md_columns(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;

ALTER TABLE md_index_details ADD CONSTRAINT md_index_details_md_index_fk1 FOREIGN KEY (index_id_fk) REFERENCES md_indexes(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE md_migr_dependency ADD CONSTRAINT migr_dependency_fk FOREIGN KEY (connection_id_fk) REFERENCES md_connections(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE md_migr_parameter ADD CONSTRAINT migr_parameter_fk FOREIGN KEY (connection_id_fk) REFERENCES md_connections(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE md_migr_weakdep ADD CONSTRAINT migr_weakdep_fk1 FOREIGN KEY (connection_id_fk) REFERENCES md_connections(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;

ALTER TABLE md_migr_weakdep ADD CONSTRAINT migr_weakdep_fk2 FOREIGN KEY (schema_id_fk) REFERENCES md_schemas(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE md_other_objects ADD CONSTRAINT md_other_objects_md_schem_fk1 FOREIGN KEY (schema_id_fk) REFERENCES md_schemas(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE md_packages ADD CONSTRAINT md_packages_md_schemas_fk1 FOREIGN KEY (schema_id_fk) REFERENCES md_schemas(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE md_partitions ADD CONSTRAINT md_partitions_md_tables_fk1 FOREIGN KEY (table_id_fk) REFERENCES md_tables(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE md_privileges ADD CONSTRAINT md_privileges_md_schemas_fk1 FOREIGN KEY (schema_id_fk) REFERENCES md_schemas(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE md_schemas ADD CONSTRAINT md_schemas_md_catalogs_fk1 FOREIGN KEY (catalog_id_fk) REFERENCES md_catalogs(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE md_sequences ADD CONSTRAINT md_sequences_md_schemas_fk1 FOREIGN KEY (schema_id_fk) REFERENCES md_schemas(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE md_stored_programs ADD CONSTRAINT md_stored_programs_md_pac_fk1 FOREIGN KEY (package_id_fk) REFERENCES md_packages(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;

ALTER TABLE md_stored_programs ADD CONSTRAINT md_stored_programs_md_sch_fk1 FOREIGN KEY (schema_id_fk) REFERENCES md_schemas(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE md_synonyms ADD CONSTRAINT md_synonyms_md_schemas_fk1 FOREIGN KEY (schema_id_fk) REFERENCES md_schemas(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE md_tables ADD CONSTRAINT md_tables_md_schemas_fk1 FOREIGN KEY (schema_id_fk) REFERENCES md_schemas(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE md_tablespaces ADD CONSTRAINT md_tablespaces_md_schemas_fk1 FOREIGN KEY (schema_id_fk) REFERENCES md_schemas(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE md_users ADD CONSTRAINT md_users_md_schemas_fk1 FOREIGN KEY (schema_id_fk) REFERENCES md_schemas(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE md_user_defined_data_types ADD CONSTRAINT md_user_defined_data_type_fk1 FOREIGN KEY (schema_id_fk) REFERENCES md_schemas(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE md_user_privileges ADD CONSTRAINT md_user_privileges_md_pri_fk1 FOREIGN KEY (privilege_id_fk) REFERENCES md_privileges(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;

ALTER TABLE md_user_privileges ADD CONSTRAINT md_user_privileges_md_use_fk1 FOREIGN KEY (user_id_fk) REFERENCES md_users(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE md_views ADD CONSTRAINT md_views_md_schemas_fk1 FOREIGN KEY (schema_id_fk) REFERENCES md_schemas(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE migrlog ADD CONSTRAINT migr_migrlog_fk FOREIGN KEY (parent_log_id) REFERENCES migrlog(id) ON DELETE NO ACTION NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE migr_datatype_transform_map ADD CONSTRAINT migr_datatype_transform_m_fk1 FOREIGN KEY (project_id_fk) REFERENCES md_projects(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE migr_datatype_transform_rule ADD CONSTRAINT migr_datatype_transform_r_fk1 FOREIGN KEY (map_id_fk) REFERENCES migr_datatype_transform_map(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE migr_generation_order ADD CONSTRAINT migr_generation_order_md__fk1 FOREIGN KEY (connection_id_fk) REFERENCES md_connections(id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE ws_colgroup_column_ids ADD CONSTRAINT ws_colgroup_column_ids_cgr_fk FOREIGN KEY (colgroupid) REFERENCES ws_column_groups(colgroupid) ON DELETE NO ACTION NOT DEFERRABLE INITIALLY IMMEDIATE;

ALTER TABLE ws_colgroup_column_ids ADD CONSTRAINT ws_colgroup_column_ids_col_fk FOREIGN KEY (columnid) REFERENCES ws_column_names(columnid) ON DELETE NO ACTION NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE ws_userid_clientid ADD CONSTRAINT ws_user_settings_clientid_fk FOREIGN KEY (userid) REFERENCES ws_user_settings(userid) ON DELETE NO ACTION NOT DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE ws_user_colgroup_ids ADD CONSTRAINT ws_user_colgroup_fk FOREIGN KEY (colgroupid) REFERENCES ws_column_groups(colgroupid) ON DELETE NO ACTION NOT DEFERRABLE INITIALLY IMMEDIATE;

ALTER TABLE ws_user_colgroup_ids ADD CONSTRAINT ws_user_colgroup_ids_user_fk FOREIGN KEY (userid) REFERENCES ws_user_settings(userid) ON DELETE NO ACTION NOT DEFERRABLE INITIALLY IMMEDIATE;



SET client_encoding TO 'UTF8';

SET search_path = vrt,oracle,public;

SET check_function_bodies = false;

CREATE OR REPLACE VIEW vrt.scd AS SELECT * FROM vrt.scd_2;
ALTER VIEW vrt.scd OWNER TO scd_testuser;
CREATE OR REPLACE VIEW vrt.scdx AS SELECT * FROM vrt.scdx_1;
ALTER VIEW vrt.scdx OWNER TO scd_testuser;
